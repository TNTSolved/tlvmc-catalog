

// directives
maxLength = function () {
    return {
        require:"ngModel",
        link: function (scope, element, attrs, ngModel) {
            element.bind("keyup", function (e) {
                if (e.target.value.length > e.target.maxLength) {
                    scope.$apply(function () {
                        ngModel.$setViewValue(e.target.value.substring(0, e.target.maxLength));
                        ngModel.$render();
                    });
                }
            })
        }
    }
};

greaterThanValidate = function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, ele, attrs, ctrl) {

            // add a parser that will process each time the value is
            // parsed into the model when the user updates it.
            ctrl.$parsers.unshift(function (value) {
                if (value) {
                    // test and set the validity after update.
                    var valid = parseInt(value) > parseInt(attrs.greaterThanValidate);
                    ctrl.$setValidity('greater', valid);
                    ctrl.$setValidity('number', valid);
                }

                // if it's valid, return the value to the model,
                // otherwise return undefined.
                return valid ? value : undefined;
            });
           

        }
    }
};

//services
calcService = function ($q, $http) {
    this.GeneralRequest = function (data, reqUrl) {
        console.log("GeneralRequest Start");
        return $http({
            method: 'POST',
            url: reqUrl,
            data: data,
            headers: { 'Content-Type': 'application/json' }
        });

    };

 
    this.GetDetails = function (reqUrl) {
        console.log("GeneralRequest Start");
        return $http({
            method: 'Get',
            url: reqUrl,
            headers: { 'Content-Type': 'application/json' }
        });

    }
    this.getUserDeatilIfRegister = function (reqUrl) {
        var serviceThis = this;
        //var returnObj={}
        var deferred = $q.defer();

        serviceThis.GetDetails(reqUrl).then(function (response) {
            if (response.data != null) {
                var reqData = { "GovermentId": response.data.GovermentId };
                serviceThis.GeneralRequest(reqData, "/WebApi/api/UserDetails/GetUserDetails").then(function (response) {
                    deferred.resolve(response);
                }, function (response) {
                    deferred.resolve(null);
                });
            }
            else {
                deferred.resolve(null);
            }
        }, function (response) {
            deferred.resolve(null);
        });

        return deferred.promise;




    }


    this.calc = function (weight, height) {
        var bmiHeight = this.GetBmiHeight(height);
        var bmi = weight / (bmiHeight * bmiHeight);

        return bmi.toFixed(2);
    };
    this.GetBmiHeight = function (height) {
        var bmiHeight = 0;

        bmiHeight = height * 0.1;

        if (height <= 9)
            bmiHeight = height * 0.01;
        else if (height <= 99 && height >= 10)
            bmiHeight = height * 0.01;
        else
            bmiHeight = height * 0.01;

        return bmiHeight;
    };
    this.format = function (string) {

        return string.format(arguments[1], arguments[2]);
    };
};
//  controllers
CalcBmiControllerFunc = function ($scope, $sce, calcService) {

    $scope.format = calcService.format;
    $scope.stageQuestionnaire = true;
    $scope.calcBmiObject = {};
    $scope.resource = UIResource;
    $scope.bmiResults = { bmi: "", bmiMessage: "", bmiHelp: "" };

    $scope.GetBmiHelp = function(bmi,height,weight)
        {
            var message = "";

            var min_weight = height * height * 18.5;
            var max_weight = height * height * 24.99;

            if (bmi < 18.5)
            {
                var gain = weight - min_weight;
                message = UIResource.Calc_BMI_ResultHelp1.format(gain.toFixed(0), min_weight.toFixed(0), max_weight.toFixed(0));
            }
            else if (bmi >= 18.5 && bmi < 25)
            {
                message = "";
            }
            else if (bmi >= 25 && bmi < 30)
            {
                var loose = max_weight - weight;
                message = UIResource.Calc_BMI_ResultHelp2.format(loose.toFixed(0), min_weight.toFixed(0), max_weight.toFixed(0));
            }
            else if (bmi >= 30)
            {
                var loose = max_weight - weight;
                message = UIResource.Calc_BMI_ResultHelp2.format(loose.toFixed(0), min_weight.toFixed(0), max_weight.toFixed(0));
            }

            return message;
    }
    
    $scope.GetBmiMessage = function (bmi) {

        var message = "";

        if (bmi < 18.5)
            message = UIResource.Calc_BMI_ResultMessage1;
        else if (bmi >= 18.5 && bmi < 25)
            message = UIResource.Calc_BMI_ResultMessage2;
        else if (bmi >= 25 && bmi < 30)
            message = UIResource.Calc_BMI_ResultMessage3;
        else if (bmi >= 30)
            message = UIResource.Calc_BMI_ResultMessage4;


        return message;

    };
    $scope.submitForm = function (isValid) {
        // check to make sure the form is completely valid
        if (isValid) {
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();
            $scope.stageQuestionnaire = false;
            $scope.bmiResults.bmi = calcService.calc($scope.calcBmiObject.TasmcWeight, $scope.calcBmiObject.TasmcHeight);
            $scope.bmiResults.bmiMessage = $scope.GetBmiMessage($scope.bmiResults.bmi);
            $scope.bmiResults.bmiHelp = $scope.GetBmiHelp($scope.bmiResults.bmi, calcService.GetBmiHeight($scope.calcBmiObject.TasmcHeight), $scope.calcBmiObject.TasmcWeight);
            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });
        }
        else {
            angular.forEach($scope.BmiForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }

    };
    $scope.ideal_weight_min_boys = [ 14.73, 14.34, 14.04, 13.85, 13.75, 13.73, 13.81, 13.97, 14.23, 14.57, 14.99,
                                     15.47, 16.00, 16.56, 17.14, 17.71, 18.25, 18.74, 19.15 ];
    $scope.ideal_weight_max_boys = [ 18.11, 17.32, 16.92, 16.83, 17.00, 17.39, 17.95, 18.62, 19.38, 20.19, 21.01,
                                     21.84, 22.65, 23.44, 24.20, 24.93, 25.65, 26.35, 27.07 ];
    $scope.ideal_weight_min_girls = [14.39, 14.01, 13.72, 13.53, 13.44, 13.44, 13.55, 13.75, 14.05, 14.41, 14.84,
                                     15.32, 15.82, 16.32, 16.80, 17.22, 17.56, 17.78, 17.83 ];
    $scope.ideal_weight_max_girls =[ 17.96, 17.16, 16.79, 16.79, 17.09, 17.62, 18.31, 19.11, 19.97, 20.86, 21.73,
                                     22.57, 23.34, 24.04, 24.65, 25.19, 25.67, 26.09, 26.49 ];

    $scope.boys_level1 = [ 14.72, 14.33, 14.03, 13.84, 13.74, 13.72, 13.80, 13.96, 14.22, 14.56, 14.98, 15.46, 15.99,
                            16.55, 17.13, 17.70, 18.24, 18.73, 19.14 ];
    $scope.boys_level2 = [ 18.12, 17.33, 16.93, 16.84, 17.01, 17.40, 17.96, 18.63, 19.39, 20.20, 21.02, 21.85, 22.66,
                            23.45, 24.21, 24.94, 25.66, 26.36, 27.08 ];
    $scope.boys_level3 = [ 19.28, 18.24, 17.84, 17.94, 18.41, 19.15, 20.07, 21.09, 22.15, 23.21, 24.23, 25.18, 26.05,
                            26.84, 27.56, 28.26, 28.96, 29.73, 30.63 ];

    $scope.girls_level1 =[ 14.38, 14.00, 13.71, 13.52, 13.43, 13.43, 13.54, 13.74, 14.04, 14.40, 14.83, 15.31, 15.81,
                             16.31, 16.79, 17.21, 17.55, 17.77, 17.82 ];
    $scope.girls_level2 = [ 17.97, 17.17, 16.80, 16.80, 17.10, 17.63, 18.32, 19.12, 19.98, 20.87, 21.74, 22.58, 23.35,
                            24.05, 24.66, 25.20, 25.68, 26.10, 26.50 ];
    $scope.girls_level3 = [ 19.06, 18.25, 18.03, 18.26, 18.84, 19.68, 20.70, 21.82, 22.98, 24.14, 25.26, 26.30, 27.26,
                             28.12, 28.91, 29.63, 30.33, 31.03, 31.80];

    $scope.GetIdealWeight = function (gender, age,  height) {
        var bmiHeight = calcService.GetBmiHeight(height);
        var idealHeight = bmiHeight * bmiHeight;
        var idealWeightMinRef;
        var idealWeightMaxRef;

        if (gender == true)//male
        {
            idealWeightMinRef = $scope.ideal_weight_min_boys[age - 2];
            idealWeightMaxRef = $scope.ideal_weight_max_boys[age - 2];
        }
        else //female
        {
            idealWeightMinRef = $scope.ideal_weight_min_girls[age - 2];
            idealWeightMaxRef = $scope.ideal_weight_max_girls[age - 2];
        }
        var returnObject = new Object();
        //var returnObject = new Array();
        returnObject[0] = (idealHeight * idealWeightMinRef).toFixed(2);
        returnObject[1] = (idealHeight * idealWeightMaxRef).toFixed(2);
        return returnObject;
    };
    $scope.GetLevel = function (gender, age, bmi) {
        
            var level1 ,level2 ,level3 = [];
            var level = 0;

            if (gender == true)
            {
                level1 = $scope.boys_level1;
                level2 = $scope.boys_level2;
                level3 = $scope.boys_level3;
            }
            else
            {
                level1 = $scope.girls_level1;
                level2 = $scope.girls_level2;
                level3 = $scope.girls_level3;
            }

            if (bmi < level1[age - 2])
                level = 1;
            else if (bmi >= level1[age - 2] && bmi < level2[age - 2])
                level = 2;
            else if (bmi >= level2[age - 2] && bmi < level3[age - 2])
                level = 3;
            else if (bmi >= level3[age - 2])
                level = 4;

            return level;
    };
    $scope.GetMoreInfoUrl = function (gender, age,  bmi) { 

            var level = $scope.GetLevel(gender, age, bmi);
            var propertyName = (gender == true) ? "Boys" : "Girls";

            return UIResource["CalcKidsBMI_" + propertyName + "Url_" + level.toString()];

    };
    $scope.submitKidsBmiForm = function (isValid) {
        // check to make sure the form is completely valid
        if (isValid) {
            $scope.stageQuestionnaire = false;
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();
            var idealWeight = $scope.GetIdealWeight($scope.calcBmiObject.TasmcGender,  $scope.calcBmiObject.TasmcAge,  $scope.calcBmiObject.TasmcHeight);
            var bmi = calcService.calc($scope.calcBmiObject.TasmcWeight, $scope.calcBmiObject.TasmcHeight);
            var level = $scope.GetLevel($scope.calcBmiObject.TasmcGender, $scope.calcBmiObject.TasmcAge, bmi);


            var titleFormat = ($scope.calcBmiObject.TasmcGender == true) ? UIResource.Calc_KidsBMI_Result_TitleFormat_Boy : UIResource.Calc_KidsBMI_Result_TitleFormat_Girl;
            var textFormat = ($scope.calcBmiObject.TasmcGender == true) ? UIResource.Calc_KidsBMI_Result_TextFormat_Boy : UIResource.Calc_KidsBMI_Result_TextFormat_Girl;
            var description = ($scope.calcBmiObject.TasmcGender == true) ? UIResource["Calc_KidsBMI_Result_Description_Boy" + level.toString()] : UIResource["Calc_KidsBMI_Result_Description_Girl" + level.toString()];

            $scope.bmiResults.bmi = titleFormat.format(parseFloat(bmi));
            $scope.bmiResults.bmiMessage = textFormat.format($scope.calcBmiObject.TasmcAge, $scope.calcBmiObject.TasmcHeight, $scope.calcBmiObject.TasmcWeight, parseFloat(idealWeight[0]).toFixed(0), parseFloat(idealWeight[1]).toFixed(0), $scope.GetMoreInfoUrl($scope.calcBmiObject.TasmcGender, $scope.calcBmiObject.TasmcAge, bmi));
            $scope.bmiResults.bmiHelp = description;
            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });
        }
        else {
            angular.forEach($scope.BmiForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }

    };
    $scope.setRadioFromBack = function () {
        $scope.calcBmiObject.TasmcGender = '1';
        $("#TasmcFemale").attr("aria-checked", "false");
        $("#TasmcFemale").removeAttr('checked');
        $("#TasmcMale").attr('checked', 'checked');
        $("#TasmcMale").attr("aria-checked", "true");
    };
    $scope.backToCalc = function () {
        $scope.stageQuestionnaire = true;
        $scope.calcBmiObject = {};
        $scope.setRadioFromBack();
        $scope.BmiForm.$setUntouched();
        $("[id *= 'RichHtmlField'].ms-rtestate-field").show();
    };
   
};

DangerCauseControllerFunc = function ($scope, calcService) {
    $scope.stageQuestionnaire = true;
    $scope.DangerCauseObject = {};
    $scope.dangerCauseResults = {};
    $scope.resource = UIResource;
    $scope.cholesterolOptions = [{ id: 1, value: "160 mg/dL>" },
                                 { id: 2, value: "160 - 199 mg/dL" },
                                 { id: 3, value: "200 - 239 mg/dL" },
                                 { id: 4, value: "240 - 279 mg/dL" },
                                 { id: 5, value: "280 mg/dL=<" }];
    $scope.hdlOptions = [{ id: 1, value: "60 mg/dL=<" },
                                 { id: 2, value: "50 - 59 mg/dL" },
                                 { id: 3, value: "40 - 49 mg/dL" },
                                 { id: 4, value: "40 mg/dL>" }];
    $scope.bloodPressureOptions = [{ id: 1, value: "120 mmHg>" },
                                 { id: 2, value: "120 - 129 mmHg" },
                                 { id: 3, value: "130 - 139 mmHg" },
                                 { id: 4, value: "140 - 159 mmHg" },
                                 { id: 5, value: "160 mmHg=<" }];
    
    
    $scope.format = calcService.format;
    $scope.CalcAge = function(age, sex)
    {
        if (sex == "ז")
            return $scope.CalcAgeMen(age);
        else if (sex == "נ")
            return $scope.CalcAgeWoman(age);
    };

    $scope.CalcAgeMen = function(age)
    {
        var ageResult = {};
        if (age >= 20 && age <= 34)
            ageResult.longAge = -9;
        else if (age >= 35 && age <= 39)
            ageResult.longAge = -4;
        else if (age >= 40 && age <= 44)
            ageResult.longAge = 0;
        else if (age >= 45 && age <= 49)
            ageResult.longAge = 3;
        else if (age >= 50 && age <= 54)
            ageResult.longAge = 6;
        else if (age >= 55 && age <= 59)
            ageResult.longAge = 8;
        else if (age >= 60 && age <= 64)
            ageResult.longAge = 10;
        else if (age >= 65 && age <= 69)
            ageResult.longAge = 11;
        else if (age >= 70 && age <= 74)
            ageResult.longAge = 12;
        else if (age >= 75 && age <= 79)
            ageResult.longAge = 13;
        else if (age >= 79)
            ageResult.longAge = 13;
        else
            ageResult.longAge = -9;

        // Short range age calculation
        if (age >= 20 && age <= 39)
            ageResult.shortAge = 1;
        else if (age >= 40 && age <= 49)
            ageResult.shortAge = 2;
        else if (age >= 50 && age <= 59)
            ageResult.shortAge = 3;
        else if (age >= 60 && age <= 69)
            ageResult.shortAge = 4;
        else if (age >= 70 && age <= 79)
            ageResult.shortAge = 5;
        else if (age >= 79)
            ageResult.shortAge = 5;
        else
            ageResult.shortAge = 1;

        return ageResult;

    };

    $scope.CalcAgeWoman = function(age)
    {
        var ageResult = {};
        if (age >= 20 && age <= 34)
            ageResult.longAge = -7;
        else if (age >= 35 && age <= 39)
            ageResult.longAge = -3;
        else if (age >= 40 && age <= 44)
            ageResult.longAge = 0;
        else if (age >= 45 && age <= 49)
            ageResult.longAge = 3;
        else if (age >= 50 && age <= 54)
            ageResult.longAge = 6;
        else if (age >= 55 && age <= 59)
            ageResult.longAge = 8;
        else if (age >= 60 && age <= 64)
            ageResult.longAge = 10;
        else if (age >= 65 && age <= 69)
            ageResult.longAge = 12;
        else if (age >= 70 && age <= 74)
            ageResult.longAge = 14;
        else if (age >= 75 && age <= 79)
            ageResult.longAge = 16;
        else if (age > 79)
            ageResult.longAge = 16;
        else
            ageResult.longAge = -7;

        // Short range age calculation
        if (age >= 20 && age <= 39)
            ageResult.shortAge = 1;
        else if (age >= 40 && age <= 49)
            ageResult.shortAge = 2;
        else if (age >= 50 && age <= 59)
            ageResult.shortAge = 3;
        else if (age >= 60 && age <= 69)
            ageResult.shortAge = 4;
        else if (age >= 70 && age <= 79)
            ageResult.shortAge = 5;
        else if (age > 79)
            ageResult.shortAge = 5;
        else
            ageResult.shortAge = 1;

        return ageResult;
    };
    $scope.CalcHdlCholesterol = function(cHdlCholesterolID)
{
            var ret = 100;
    switch (cHdlCholesterolID)
    {
        case 0:
            ret = 100;
            break;
        case 1:
            ret = -1;
            break;
        case 2:
            ret = 0;
            break;
        case 3:
            ret = 1;
            break;
        case 4:
            ret = 2;
            break;
        default:
            ret = 100;
    }

    return ret;
    };
    $scope.CalcGenCholesterol = function(GenCholesterolID, shortAge, sex)
        {

            var arrRes1 = [ 0, 0, 0, 0, 0 ];
            var arrRes2 = [ 4, 3, 2, 1, 0 ];
            var arrRes3 = [ 7, 5, 3, 1, 0 ];
            var arrRes4 = [ 9, 6, 4, 2, 1 ];
            var arrRes5 = [ 11, 8, 5, 3, 1 ];

            if (sex == "נ")
            {
                arrRes2 = [ 4, 3, 2, 1, 1 ];
                arrRes3 = [ 8, 6, 4, 2, 1 ];
                arrRes4 = [11, 8, 5, 3, 2 ];
                arrRes5 = [ 13, 10, 7, 4, 2 ];
            }
            var res = 100;

            switch (GenCholesterolID)
            {
                case 0:
                    res = 100;
                    break;
                case 1:
                    res = arrRes1[shortAge - 1];
                    break;
                case 2:
                    res = arrRes2[shortAge - 1];
                    break;
                case 3:
                    res = arrRes3[shortAge - 1];
                    break;
                case 4:
                    res = arrRes4[shortAge - 1];
                    break;
                case 5:
                    res = arrRes5[shortAge - 1];
                    break;
            }
            return res;
    };
    $scope.CalcSmoking =  function(isSmoking, shortAge, sex)
            {
                if (sex == "ז")
                {
                    return $scope.CalcSmokingMen(isSmoking, shortAge);
                }
                else if (sex == "נ")
                {
                    return $scope.CalcSmokingWomen(isSmoking, shortAge);
                }
           
            };

    $scope.CalcSmokingMen = function(isSmoking, shortAge)
        {
            if (!isSmoking)
                return 0;

            var retSmoking = 0;

            switch (shortAge)
            {
                case 1:
                    retSmoking = 8;
                    break;
                case 2:
                    retSmoking = 5;
                    break;
                case 3:
                    retSmoking = 3;
                    break;
                case 4:
                    retSmoking = 1;
                    break;
                case 5:
                    retSmoking = 1;
                    break;
            }

            return retSmoking;
        };

    $scope.CalcSmokingWomen = function(isSmoking, shortAge)
    {
        if (!isSmoking)
            return 0;

        var retSmoking = 0;

        switch (shortAge)
        {
            case 1:
                retSmoking = 9;
                break;
            case 2:
                retSmoking = 7;
                break;
            case 3:
                retSmoking = 4;
                break;
            case 4:
                retSmoking = 2;
                break;
            case 5:
                retSmoking = 1;
                break;
        }

        return retSmoking;
    };
    $scope.CalcBlood = function(isBloodPresureTreatment,bloodPressureID,sex)
    {

        if (sex == "ז")
        {
            return $scope.CalcBloodMen(isBloodPresureTreatment, bloodPressureID);
        }
        else if (sex == "נ")
        {
            return $scope.CalcBloodWomen(isBloodPresureTreatment, bloodPressureID);
        }
    
    };

    $scope.CalcBloodMen = function(isBloodPresureTreatment, bloodPressureID)
    {

        var retBlood = bloodPressureID;
        if (isBloodPresureTreatment)
        {
            switch (bloodPressureID)
            {
                case 0:
                    retBlood = 100;
                    break;
                case 1:
                    retBlood = 0;
                    break;
                case 2:
                    retBlood = 1;
                    break;
                case 3:
                    retBlood = 2;
                    break;
                case 4:
                    retBlood = 2;
                    break;
                case 5:
                    retBlood = 3;
                    break;
            }
        }
        else
        {
            switch (bloodPressureID)
            {
                case 0:
                    retBlood = 100;
                    break;
                case 1:
                    retBlood = 0;
                    break;
                case 2:
                    retBlood = 0;
                    break;
                case 3:
                    retBlood = 1;
                    break;
                case 4:
                    retBlood = 1;
                    break;
                case 5:
                    retBlood = 2;
                    break;
            }
        }
        return retBlood;
    };

    $scope.CalcBloodWomen = function(isBloodPresureTreatment, bloodPressureID)
    {

        var retBlood = bloodPressureID;
        if (isBloodPresureTreatment)
        {
            switch (bloodPressureID)
            {
                case 0:
                    retBlood = 100;
                    break;
                case 1:
                    retBlood = 0;
                    break;
                case 2:
                    retBlood = 3;
                    break;
                case 3:
                    retBlood = 4;
                    break;
                case 4:
                    retBlood = 5;
                    break;
                case 5:
                    retBlood = 6;
                    break;
            }
        }
        else
        {
            switch (bloodPressureID)
            {
                case 0:
                    retBlood = 100;
                    break;
                case 1:
                    retBlood = 0;
                    break;
                case 2:
                    retBlood = 1;
                    break;
                case 3:
                    retBlood = 2;
                    break;
                case 4:
                    retBlood = 3;
                    break;
                case 5:
                    retBlood = 4;
                    break;
            }
        }
        return retBlood;
    };
    $scope.CalcResult = function(longAge, genCholesterol, cHdlCholesterol, blood, smoking, sex)
    {
        var sumResult = 300;
        if (cHdlCholesterol != 100 && genCholesterol != 100 && blood != 100)
            sumResult = longAge + genCholesterol + cHdlCholesterol + blood + smoking;

        if (sex == "ז")
        {
            return $scope.CalcResultMen(sumResult);
        }
        else if (sex == "נ")
        {
            return $scope.CalcResultWomen(sumResult);
        }
    };

    $scope.CalcResultMen = function (sumResult)
    {
        var result = 0;

        if (sumResult <= 0)
        {
    
            result = 1;
        }

        else if (sumResult == 1)
            result = 1;
        else if (sumResult == 2)
            result = 1;
        else if (sumResult == 3)
            result = 1;
        else if (sumResult == 4)
            result = 1;
        else if (sumResult == 5)
            result = 2;
        else if (sumResult == 6)
            result = 2;
        else if (sumResult == 7)
            result = 3;
        else if (sumResult == 8)
            result = 4;
        else if (sumResult == 9)
            result = 5;
        else if (sumResult == 10)
            result = 6;
        else if (sumResult == 11)
            result = 8;
        else if (sumResult == 12)
            result = 10;
        else if (sumResult == 13)
            result = 12;
        else if (sumResult == 14)
            result = 16;
        else if (sumResult == 15)
            result = 20;
        else if (sumResult == 16)
            result = 25;
        else if (sumResult >= 17 && sumResult < 300)
        {
            result = 30;
        }

        return result;
    };

    $scope.CalcResultWomen = function (sumResult) {
        var result = 0;
        if (sumResult <= 9) {
            result = 1;
        }

        else if (sumResult == 9)
            result = 1;
        else if (sumResult == 10)
            result = 1;
        else if (sumResult == 11)
            result = 1;
        else if (sumResult == 12)
            result = 1;
        else if (sumResult == 13)
            result = 2;
        else if (sumResult == 14)
            result = 2;
        else if (sumResult == 15)
            result = 3;
        else if (sumResult == 16)
            result = 4;
        else if (sumResult == 17)
            result = 5;
        else if (sumResult == 18)
            result = 6;
        else if (sumResult == 19)
            result = 8;
        else if (sumResult == 20)
            result = 11;
        else if (sumResult == 21)
            result = 14;
        else if (sumResult == 22)
            result = 17;
        else if (sumResult == 23)
            result = 22;
        else if (sumResult == 24)
            result = 27;
        else if (sumResult >= 25 && sumResult < 300) {
            result = 30;
        }

        return result;
    };
    $scope.Calc = function (age, sex, isSmoking, isBloodPresureTreatment, bloodPressureID, cHdlCholesterolID, genCholesterolID)
                {
                    var ageResult;

                    ageResult = $scope.CalcAge(age, sex);

                    var cHdlCholesterol = $scope.CalcHdlCholesterol(cHdlCholesterolID);
                    var genCholesterol = $scope.CalcGenCholesterol(genCholesterolID, ageResult.shortAge, sex);
                    var smoking = $scope.CalcSmoking(isSmoking, ageResult.shortAge, sex);
                    var blood = $scope.CalcBlood(isBloodPresureTreatment, bloodPressureID, sex);
                    var dangerCauseResult = $scope.CalcResult(ageResult.longAge, genCholesterol, cHdlCholesterol, blood, smoking, sex);

                    return dangerCauseResult; ;
                };
    $scope.submitForm = function (isValid) {
        // check to make sure the form is completely valid
        if (isValid) {
            $scope.stageQuestionnaire = false;
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();

            var age = $scope.DangerCauseObject.TasmcAge;
            var gender = $scope.DangerCauseObject.TasmcGender;
            var smoker = $scope.DangerCauseObject.chkSmoker;
            var medicationBloodPressure = $scope.DangerCauseObject.TasmcMedication_blood_pressure;
            var bloodPressure = $scope.DangerCauseObject.TasmcBloodPressure;
            var hdl = $scope.DangerCauseObject.TasmcHdl;
            var cholesterol = $scope.DangerCauseObject.TasmcCholesterol;

            var result = $scope.Calc(age, (gender == '1') ? "ז" : "נ", smoker, medicationBloodPressure, bloodPressure, hdl, cholesterol);

            $scope.dangerCauseResults.Text = UIResource.Calc_DangerCause_Result_TitleFormat.format(result);
            $scope.dangerCauseResults.dangerCauseMessageLevel1 = UIResource.Calc_DangerCause_Result_MessageLevel1;
            $scope.dangerCauseResults.dangerCauseMessageLevel2 = UIResource.Calc_DangerCause_Result_MessageLevel2;
            $scope.dangerCauseResults.dangerCauseMessageLevel3 = UIResource.Calc_DangerCause_Result_MessageLevel3;
            $scope.dangerCauseResults.dangerCauseMessageLevel4 = UIResource.Calc_DangerCause_Result_MessageLevel4;
            $scope.dangerCauseResults.dangerCauseMessageLevel5 = UIResource.Calc_DangerCause_Result_MessageLevel5;
            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });
        }
        else {
            angular.forEach($scope.DangerCauseForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }

    };
    $scope.setRadioFromBack = function () {
        $scope.DangerCauseObject.TasmcGender = '1';
        $("#TasmcFemale").attr("aria-checked", "false");
        $("#TasmcFemale").removeAttr('checked');
        $("#TasmcMale").attr('checked', 'checked');
        $("#TasmcMale").attr("aria-checked", "true");
    };
    $scope.backToCalc = function () {
        $scope.stageQuestionnaire = true;
        $scope.DangerCauseObject = {};
        $scope.setRadioFromBack();
        $scope.DangerCauseForm.$setUntouched();
        $("[id *= 'RichHtmlField'].ms-rtestate-field").show();
    };
};

NutritionControllerFunc = function ($scope, calcService) {
    $scope.stageQuestionnaire = true;
    $scope.nutritionObject = {};
    $scope.resource = UIResource;
    $scope.nutritionResults = {};
    $scope.format = calcService.format;
    $scope.innerCalc = function(weight, height, eatless, weightloss, mobile, depress, neuro)
        {
        var bmi = calcService.calc(weight, height);
            var bmix = 0;

            if (bmi <= 19) bmix = 0;
            else if (bmi > 19 && bmi < 21) bmix = 1;
            else if (bmi >= 21 && bmi < 23) bmix = 2;
            else if (bmi >= 23) bmix = 3;

            var sum = bmix + eatless + weightloss + mobile + depress + neuro;

            var message = "";

            if (sum >= 11)
                message = UIResource.Calc_ElderlyNutrition_Result1;
            else if (sum <= 10)
                message = UIResource.Calc_ElderlyNutrition_Result2;

            return message;
        };
    $scope.submitForm = function (isValid) {
        // check to make sure the form is completely valid
        if (isValid) {
            $scope.stageQuestionnaire = false;
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();

            var height = $scope.nutritionObject.TasmcHeight;
            var weight = $scope.nutritionObject.TasmcWeight;
            var eatless = parseInt($scope.nutritionObject.TasmcEatless);
            var weightloss = parseInt($scope.nutritionObject.TasmcWeightloss);
            var mobile = parseInt($scope.nutritionObject.TasmcMobile);
            var depress = parseInt($scope.nutritionObject.TasmcDepress);
            var neuro = parseInt($scope.nutritionObject.TasmcNeuro);

            $scope.nutritionResults.message = $scope.innerCalc(weight, height, eatless, weightloss, mobile, depress, neuro);
            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });
        }
        else {
            angular.forEach($scope.ElderlyNutritionForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }

    };
    $scope.setRadioFromBack = function () {
        $("input[checked='checked']").attr("aria-checked", "false");
        $("input[checked='checked']").removeAttr('checked');
    };
    $scope.backToCalc = function () {
        $scope.stageQuestionnaire = true;
        $scope.nutritionObject = {};
        $scope.setRadioFromBack();
        $scope.ElderlyNutritionForm.$setUntouched();
        $("[id *= 'RichHtmlField'].ms-rtestate-field").show();
    };
};

DepressionControllerFunc = function ($scope, calcService) {

    $scope.stageQuestionnaire = true;
    $scope.depressionObject = {};
    $scope.resource = UIResource;
    $scope.depressionResults = {};
    $scope.depressionCalc = function(sum) {
        var message = "";

        if (sum >= 5)
            message = UIResource.Calc_ElderlyDepression_Result1;
        else if (sum <= 4)
            message = UIResource.Calc_ElderlyDepression_Result2;


        return message;
    };
    $scope.submitForm = function (isValid) {
        // check to make sure the form is completely valid
        if (isValid) {
            $scope.stageQuestionnaire = false;
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();

            var sum = $("input[checked='checked'][depression-sign]").length;

            $scope.depressionResults.message = $scope.depressionCalc(sum);
            
            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });

        
        }
        else {
            angular.forEach($scope.DepressionForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }

    };
    $scope.setRadioFromBack = function () {
        $("input[id*='No']").attr("aria-checked", "false");
        $("input[id*='No']").removeAttr('checked');

        $("input[id*='Yes']").attr("aria-checked", "true");
        $("input[id*='Yes']").attr('checked', 'checked');
        for (i = 1; i < 16; i++)
        {
            $scope.depressionObject["TasmcQ" + i] = '1';
        }
    };
    $scope.backToCalc = function () {
        $scope.stageQuestionnaire = true;
        $scope.depressionObject = {};
        $scope.setRadioFromBack();
        $scope.DepressionForm.$setUntouched();
        $("[id *= 'RichHtmlField'].ms-rtestate-field").show();
    };
};

BoneHealthControllerFunc = function ($scope, calcService) {

    $scope.stageQuestionnaire = true;
    $scope.BoneHealthObject = {};
    $scope.resource = UIResource;
    $scope.BoneHealthResults = {};
    $scope.BoneHealthCalc = function (sum) {
        var message = "";

        if (sum == 0)
            message = UIResource.Calc_BoneHealth_Result1;
        else 
            message = UIResource.Calc_BoneHealth_Result2;


        return message;
    };
    $scope.submitForm = function (isValid) {
        // check to make sure the form is completely valid
        if (isValid) {
            $scope.stageQuestionnaire = false;
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();

            var sum = $("input[checked='checked'][BoneHealth-sign]").length;

            $scope.BoneHealthResults.message = $scope.BoneHealthCalc(sum);

            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });


        }
        else {
            angular.forEach($scope.BoneHealthForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }

    };
    $scope.setRadioFromBack = function () {
        $("input[id*='No']").attr("aria-checked", "false");
        $("input[id*='No']").removeAttr('checked');

        $("input[id*='Yes']").attr("aria-checked", "false");
        $("input[id*='Yes']").removeAttr('checked');
        for (i = 1; i < 8; i++) {
            $scope.BoneHealthObject["TasmcQ" + i] = '';
        }
    };
    $scope.backToCalc = function () {
        $scope.stageQuestionnaire = true;
        $scope.BoneHealthObject = {};
        $scope.setRadioFromBack();
        $scope.BoneHealthForm.$setUntouched();
        $("[id *= 'RichHtmlField'].ms-rtestate-field").show();
    };
};

MetabolicControllerFunc = function ($scope, calcService) {

    $scope.stageQuestionnaire = true;
    $scope.metabolicObject = {};
    $scope.resource = UIResource;
    $scope.metabolicResults = {};
    $scope.format = calcService.format;
    $scope.greaterThan = function ($event) {
        if ($scope.TasmcMetabolicForm.TasmcSystolicBloodPressure.$viewValue && $event.currentTarget.value != '') {
            var valid = parseInt($scope.TasmcMetabolicForm.TasmcSystolicBloodPressure.$viewValue) > parseInt($event.currentTarget.value);
            
            $scope.TasmcMetabolicForm.TasmcSystolicBloodPressure.$setValidity('greater', valid);
            $scope.TasmcMetabolicForm.TasmcSystolicBloodPressure.$setValidity('number', valid);
           
        }
    };
    $scope.metabolicCalc = function ( waist, gender, HDL, diastolic, systolic, medication, glucose, triglycerides){
            var result = "";
            var text = "";
    var met1 = 0;
    var met2 = 0;
    var met3 = 0;
    var met4 = 0;
    var met5 = 0;
    var metAA3 = false;
    var metBB3 = false;
    var metCC3 = false;
    var metabolic = 0;

    if (waist >= 102 && gender == 1) { met1 = 1; text = "היקף מתניים גבוה"; }
    if (waist < 102 && gender == 1) { met1 = 0; text = " היקף מתניים תקין"; }
    if (waist >= 88 && gender == 2) { met1 = 1; text = " היקף מתניים גבוה"; }
    if (waist < 88 && gender == 2) { met1 = 0; text = " היקף מתניים תקין"; }

    if (HDL >= 45 && gender == 1) { met2 = 1; text = "ערך נמוך (לא רצוי)"; }
    if (HDL < 45 && gender == 1) { met2 = 0; text = "ערך תקין "; }
    if (HDL >= 50 && gender == 2) { met2 = 1; text = " ערך נמוך (לא רצוי)"; }
    if (HDL < 50 && gender == 2) { met2 = 0; text = "ערך תקין "; }

    if (diastolic >= 85) metAA3 = true;
    if (diastolic < 85) metAA3 = false;

    if (systolic >= 130) metBB3 = true;
    if (systolic < 130) metBB3 = false;

    if (medication == 1) metCC3 = true;
    if (medication == 0) metCC3 = false;

    if (metAA3 || metBB3 || metCC3) { met3 = 1; text = "קיים יתר לחץ דם"; }
    if (metAA3 && metBB3 && metCC3) { met3 = 0; text = "לחץ דם תקין"; }

    if (glucose >= 100) { met4 = 1; text = "ערך גלוקוז (סוכר) גבוה"; }
    if (glucose < 100) { met4 = 0; text = "ערך גלוקוז ( סוכר) תקין"; }

    if (triglycerides >= 150) { met5 = 1; text = "ערך טריגליצרידים גבוה"; }
    if (triglycerides < 150) { met5 = 0; text = "ערך טריגליצרידים תקין"; }

    metabolic = met1 + met2 + met3 + met4 + met5;

    if (metabolic >= 0 && metabolic <= 5)
        result = UIResource["Calc_Metabolic_Result_" + metabolic.toString()];

    return result;
};
    $scope.submitForm = function (isValid) {
        // check to make sure the form is completely valid
        if (isValid) {
            $scope.stageQuestionnaire = false;
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();

            var waists = $scope.metabolicObject.TasmcWaists;
            var gender = $scope.metabolicObject.TasmcGender == '1' ? true : false;
            var hdl = $scope.metabolicObject.TasmcHdl;
            var diastolic_blood_pressure = $scope.metabolicObject.TasmcDiastolicBloodPressure;
            var systolic_blood_pressure = $scope.metabolicObject.TasmcSystolicBloodPressure;
            var medication_blood_pressure = $scope.metabolicObject.TasmcMedicationBloodPressure == '1' ? true : false;
            var glucose = $scope.metabolicObject.TasmcGlucose;
            var triglyceride = $scope.metabolicObject.TasmcTriglyceride;

            var message = $scope.metabolicCalc(
                                    waists,
                                    gender ? 1 : 2,
                                    hdl,
                                    diastolic_blood_pressure,
                                    systolic_blood_pressure,
                                    medication_blood_pressure ? 1 : 0,
                                    glucose,
                                    triglyceride);


            $scope.metabolicResults.message = message;
            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });
        }
        else {
            angular.forEach($scope.TasmcMetabolicForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    errorField.$setTouched();
                })
            });
        }

    };
    $scope.setRadioFromBack = function () {

        $scope.metabolicObject.TasmcMedicationBloodPressure = '0';
        $scope.metabolicObject.TasmcGender = '1';
        $("#TasmcFemale").attr("aria-checked", "false");
        $("#TasmcFemale").removeAttr('checked');
        $("#TasmcMale").attr('checked', 'checked');
        $("#TasmcMale").attr("aria-checked", "true");

        $("#rdbMedicationBloodPressureYes").attr("aria-checked", "false");
        $("#rdbMedicationBloodPressureYes").removeAttr('checked');
        $("#rdbMedicationBloodPressureNo").attr('checked', 'checked');
        $("#rdbMedicationBloodPressureNo").attr("aria-checked", "true");
       
    };
    $scope.backToCalc = function () {
        $scope.stageQuestionnaire = true;
        $scope.metabolicObject = {};
        $scope.setRadioFromBack();
        $scope.TasmcMetabolicForm.$setUntouched();
        $("[id *= 'RichHtmlField'].ms-rtestate-field").show();
    };
};

HealthQuestionnaireControllerFunc = function ($scope, calcService) {
    $scope.stageQuestionnaire = true;
    $scope.healthObject = {};
    $scope.resource = UIResource;
    $scope.healthResults = {};
    $scope.GovermentId = "";
    $scope.Init = function () {
       // showLoader();
        calcService.getUserDeatilIfRegister("/WebApi/api/LoginController/GetLoggedInUser")
      .then(function successCallback(response) {
        //  hideLoader();
          if (response != null) {
              console.log("success getUserDeatilIfRegister");
              console.log(response.data);
              $scope.InitInterests(response.data.GovermentId, response.data.WomenHealth, response.data.MenHealth, response.data.ChildHealth, response.data.ElderlyHealth);
          }
          else {
              //return to loggin page
          }

      }, function errorCallback(response) {
       //   hideLoader();
          console.log("error");
          console.log(response);
      });
    };
    $scope.format = calcService.format;
    $scope.cancerOptions = [{ id: 1, value: "סרטן עור מלונמה sqanamus, cell, BBC, carcinoma" },
                                { id: 2, value: "סרטן חלל הפה" },
                                { id: 3, value: "לימפומה" },
                                { id: 4, value: "סרטן של בלוטת התריס" },
                                { id: 5, value: "סרטן שד" },
                                { id: 6, value: "סרטן שחלה וחצוצרות" },
                                { id: 7, value: "סרטן רחם" },
                                { id: 8, value: "סרטן חלחולת (רקטום)" },
                                { id: 9, value: "סרטן מעי גס" },
                                { id: 10, value: "סרטן ערמונית" },
                                { id: 11, value: "סרטן אשכים" }];
    $scope.groupsResults = [];
    $scope.calcHealthQuestionnaire = function(highBloodPressure1,diabetes1,cholesterol1,heartAttack,stroke,bloodVessels,cancer1,cancer4){
        var groups = [];
       

        $scope.groupsResults[0] = highBloodPressure1; highBloodPressure1 && groups.push(1);
        $scope.groupsResults[1] = diabetes1; diabetes1 && groups.push(2);
        $scope.groupsResults[2] = cholesterol1; cholesterol1 && groups.push(3);
        $scope.groupsResults[3] = (heartAttack || stroke || bloodVessels); (heartAttack || stroke || bloodVessels) && groups.push(4);
       $scope.groupsResults[4] = cancer1; cancer1 && groups.push(5);
       $scope.groupsResults[5] = cancer4; cancer4 && groups.push(6);
       $scope.groupsResults[6] = (!groups[0] && !groups[1] && !groups[2] && !groups[3] && !groups[4] && !groups[5]); (!groups[0] && !groups[1] && !groups[2] && !groups[3] && !groups[4] && !groups[5]) && groups.push(7);
        return groups;
    };
    $scope.InitInterests = function (GovermentId, WomenHealth, MenHealth, ChildHealth, ElderlyHealth) {
        $scope.Interests = {};

        $scope.Interests.GovermentId = GovermentId;
        $scope.Interests.WomenHealth = WomenHealth;
        $scope.Interests.MenHealth = MenHealth;
        $scope.Interests.ChildHealth = ChildHealth;
        $scope.Interests.ElderlyHealth = ElderlyHealth;
    };

  
    $scope.SaveHealthQuestionnaire = function ( age, gender, weight, height, waist, smoke1, smoke2, smoke3, highBloodPressure1,
             highBloodPressure2, diabetes1, diabetes2, cholesterol1, cholesterol2, heartAttack, stroke, bloodVessels, sport, cancer1, cancer2, cancer3,
             cancer4, cancer5, cancer6) {
        $scope.Interests.HighBloodPressure = $scope.groupsResults[0];
        $scope.Interests.Cancer = $scope.groupsResults[4];
        $scope.Interests.Cardiovascular = $scope.groupsResults[3];
        $scope.Interests.Diabetes = $scope.groupsResults[1];
        $scope.Interests.HyperLipidermia = $scope.groupsResults[2];

         showLoader();
        calcService.GeneralRequest($scope.Interests, '/WebApi/api/UserDetails/UpdateUserInterests')
       .then(function successCallback(response) {
           if (response.data.ResponseErrorCode == 1) {
               console.log("UpdateUserInterests success");
               hideLoader();
           }
           else {
               console.log("UpdateUserInterests error" + response.data.ResponseErrorCode);
               hideLoader();
           }
       }, function errorCallback(response) {
           console.log("UpdateUserInterests error");
           hideLoader();
       });
    };
  
 

    $scope.submitForm = function (isValid) { // to-do check if logged in
        if (isValid) {// check to make sure the form is completely valid and is logged in
            $scope.stageQuestionnaire = false;
            $("[id *= 'RichHtmlField'].ms-rtestate-field").hide();

            var status = '';
            var groups = [];

            var age = $scope.healthObject.TasmcAge;
            var TasmcGender = ($scope.healthObject.TasmcGender == '1') ? "Male" : "Female";
            var TasmcWeight = $scope.healthObject.TasmcWeight ? $scope.healthObject.TasmcWeight : 0;
            var TasmcHeight = $scope.healthObject.TasmcHeight ? $scope.healthObject.TasmcHeight : 0;
            var TasmcWaists = $scope.healthObject.TasmcWaists ? $scope.healthObject.TasmcWaists : 0;
            var HqSmoke1 = ($scope.healthObject.HqSmoke1 == '1') ? true : false;
            var HqSmoke2 = ($scope.healthObject.HqSmoke2 == '1') ? true : false;
            var HqSmoke3 = ($scope.healthObject.HqSmoke3 == '1') ? true : false;
            var HqHighBloodPressure1 = ($scope.healthObject.HqHighBloodPressure1 == '1') ? true : false;
            var HqHighBloodPressure2 = ($scope.healthObject.HqHighBloodPressure2 == '1') ? true : false;
            var HqDiabetes1 = ($scope.healthObject.HqDiabetes1 == '1') ? true : false;
            var HqDiabetes2 = ($scope.healthObject.HqDiabetes2 == '1') ? true : false;
            var HqCholesterol1 = ($scope.healthObject.HqCholesterol1 == '1') ? true : false;
            var HqCholesterol2 = ($scope.healthObject.HqCholesterol2 == '1') ? true : false;
            var HqHeartAttack = ($scope.healthObject.HqHeartAttack == '1') ? true : false;
            var HqStroke = ($scope.healthObject.HqStroke == '1') ? true : false;
            var HqBloodVessels = ($scope.healthObject.HqBloodVessels == '1') ? true : false;
            var HqSport = ($scope.healthObject.HqSport == '1') ? true : false;
            var HqCancer1 = ($scope.healthObject.HqCancer1 == '1') ? true : false;
            var HqCancer2 = $scope.healthObject.HqCancer2 ?  $scope.cancerOptions[$scope.healthObject.HqCancer2] : 0;
            var HqCancer3 = $scope.healthObject.HqCancer3 ?  $scope.healthObject.HqCancer3 : 0;
            var HqCancer4 = ($scope.healthObject.HqCancer4 == '1') ? true : false;
            var HqCancer5 = $scope.healthObject.HqCancer5 ? $scope.cancerOptions[$scope.healthObject.HqCancer5] : 0;
            var HqCancer6 = $scope.healthObject.HqCancer6 ?  $scope.healthObject.HqCancer6 : 0;


            groups = $scope.calcHealthQuestionnaire(HqHighBloodPressure1, HqDiabetes1, HqCholesterol1, HqHeartAttack, HqStroke, HqBloodVessels, HqCancer1, HqCancer4);

            // if have loggedin UserDeatilIfRegister
            if ($scope.Interests.GovermentId) {
                $scope.SaveHealthQuestionnaire(age, TasmcGender, TasmcWeight, TasmcHeight, TasmcWaists, HqSmoke1, HqSmoke2, HqSmoke3, HqHighBloodPressure1, HqHighBloodPressure2,
                                             HqDiabetes1, HqDiabetes2, HqCholesterol1, HqCholesterol2, HqHeartAttack, HqStroke, HqBloodVessels, HqSport, HqCancer1, HqCancer2,
                                             HqCancer3, HqCancer4, HqCancer5, HqCancer6);
            }
            var message = '';

            if (groups[0] != "7")//do not dispaly title when 7 group only selected
            {
                var names = '';
                for (var i = 0, len = groups.length; i < len; i++) {
                    if (names != '') names += ", ";
                    names += UIResource["HealthQuestionnaire_GroupName" + groups[i]];
                }
                message = UIResource.HealthQuestionnaire_ResultsTitleFormat.format(names);
            }

            $scope.healthResults.message = message;
            

            $("#s4-workspace,body").scrollTo(jQuery(".breadCrumbs"), 800, { offset: -240 });

            }
        else { // form not Valid
            angular.forEach($scope.HealthForm.$error, function (field) {angular.forEach(field, function (errorField) {errorField.$setTouched();});});
        }

    };
    $scope.setRadioFromBack = function () {
        $("input[checked='checked']").attr("aria-checked", "false");
        $("input[checked='checked']").removeAttr('checked');
    };
    $scope.backToCalc = function () {
        $scope.stageQuestionnaire = true;
        $scope.healthObject = {};
        $scope.setRadioFromBack();
        $scope.HealthForm.$setUntouched();
        $("[id *= 'RichHtmlField'].ms-rtestate-field").show();
    };
};

String.prototype.format = function () {
    var str = this;
    for (var i = 0; i < arguments.length; i++) {
        var reg = new RegExp("\\{" + i + "\\}", "gm");
        str = str.replace(reg, arguments[i]);
    }
    return str;
}




var calculatorsApp = angular.module('calculatorsApp', ['ngSanitize'])
.directive('maxLength', [maxLength])
.directive('setRaioButton', [setRaioButton])
.directive('greaterThanValidate', [greaterThanValidate])
.service('calcService', ['$q' ,'$http',calcService])
.controller('CalcBmiController', ['$scope', '$sce', 'calcService', CalcBmiControllerFunc])
.controller('DangerCauseController', ['$scope', 'calcService', DangerCauseControllerFunc])
.controller('NutritionController', ['$scope', 'calcService', NutritionControllerFunc])
.controller('DepressionController', ['$scope', 'calcService', DepressionControllerFunc])
.controller('BoneHealthController', ['$scope', 'calcService', BoneHealthControllerFunc])
.controller('MetabolicController', ['$scope', 'calcService', MetabolicControllerFunc])
.controller('HealthQuestionnaireController', ['$scope', 'calcService', HealthQuestionnaireControllerFunc]);



var setRaioButton = function (radio) {
    radio.closest('.radioWrapper').siblings('.radioWrapper').find('input[checked="checked"]').attr("aria-checked", "false");
    radio.closest('.radioWrapper').siblings('.radioWrapper').find('input[checked="checked"]').removeAttr('checked');

    radio.closest('.radioWrapper').find('input').attr('checked', 'checked');
    radio.closest('.radioWrapper').find('input').attr("aria-checked", "true");
};

var setInnerRaioButton = function () {
    setRaioButton($(this));
};
var setCheckBox = function (radio) {

    if (radio.closest('.checkboxRow').find('input').attr('checked') == 'checked') {
        radio.closest('.checkboxRow').find('input').removeAttr('checked');
    }
    else { radio.closest('.checkboxRow').find('input').attr('checked', 'checked'); }
    radio.closest('.checkboxRow').find('input').click();

};

var setInnerCheckBox = function () {
    setCheckBox($(this));
};

$(document).ready(function () {

    $(".radioWrapper a,.radioWrapper .RadioLabel").bind({
        click: setInnerRaioButton,
        keypress: function (event) {if (event.which == 32) { setRaioButton($(this));}}
    });

    $(".checkboxRow a,.CheckboxLabel").bind({
        click: setInnerCheckBox,
        keypress: function (event) { if (event.which == 32) { setCheckBox($(this)); } }
    });
});
