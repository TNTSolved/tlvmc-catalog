var publicKey = UIResource.Captcha_Key; //"6LfOEBEUAAAAAPieIcvbFk72jbTjXrF7Zy9tgYN6";

//globals
var LandingPages = {
    JoinBeWellThankYou: UIResource.JoinBeWellThankYou,
    JoinMamiLisThankYou: UIResource.JoinMamiLisThankYou,
    ContactUsPRM: UIResource.ContactUs_Success_Url,
    UpdateDetails: UIResource.UpdateDetails_Success_Url,
    JoinActivityBeWell: UIResource.JoinActivity_BeWell_Url,
    JoinActivityMamiLis: UIResource.JoinActivity_MamiLis_Url,
    Appointment: UIResource.Appointment_Success_Url,
    CancelActivity: UIResource.CancelActivity_Success_Url,
    ExpertQuestion: UIResource.ExpertQuestion_Success_Url,
    ExpertAnswer: UIResource.ExpertAnswer_Success_Url,
    ContactUsMail: UIResource.ContactUsMail_Success_Url
}

var PrmTypes = {
    Join: "Join",
    JoinActivity: "JoinActivity",
    GetActivites: "GetActivites",
    PersonalInfo: "PersonalInfo",
    CancelActivity: "CancelActivity",
    ApproveJoin: "ApproveJoin",
    Login: "Login"
}

var thankYouPageURL = "/pages/thank-you.aspx";
var addEventFormURL = '/Be-Well/Pages/joinActivity.aspx?Event=';
var isBeWellSignedIN = true;
var isMommyLiss = false;
//var SubjectArr = [ { "subject":UIResource.Form_Appointment_Request_Text , "value":"1" },{ "subject":"שינוי תור" , "value":"2" },{ "subject":"ביטול תור" , "value":"3" }];
var loginPage = "/Be-Well/Pages/Login.aspx";
var loginDefaultSource = UIResource.PersonalAreaRedirectAfterLogIn// "/Be-Well/pages/HospitalizationSummary.aspx"; // "/Be-Well/MyBeWell/Pages/default.aspx";
var passwordResetUrl = UIResource.ChangePassword_Url// "/Be-Well/pages/HospitalizationSummary.aspx"; // "/Be-Well/MyBeWell/Pages/default.aspx";
var loginCookieName = "TasmcLoggedInUser";
var loginRedirectAfterLogout = "/Be-Well/Pages/Login.aspx?logout";
var ForgotPassword_InternalErr = UIResource.ForgotPassword_InternalErr;
var ForgotPassword_NoContent = UIResource.ForgotPassword_NoContent;

getParameterByName = function (name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
showLoader = function () {
    angular.element('.tasmc-loader').show();
}
hideLoader = function () {
    angular.element('.tasmc-loader').hide();
}
//Objects

function BasicDetails() {
    this.FirstName = "";
    this.LastName = "";
    this.Email = "";
    this.GovermentId = "";
    this.Telephone = "",
    this.MobilePhone = "";
    this.Street = "";
    this.StreetNumber = "";
    this.City = "",
    this.PostalCode = ""
    this.EstimatedBirthDate = "";
    this.RecaptchaResponse = "";
};

function ExpertCorrespondence() {

    this.ContactName = "";
    this.ExpertName = "";
    this.Subject = "";
    this.Description = "";
    this.Link1 = "";
    this.Link2 = "";
    this.ExpertId = "";
    this.ContactEmail = "";
    this.AlreadySent = "";
    this.Reply = "";
    this.RequestId = "";
    this.RecaptchaResponse = "";

}

function JoinBeWell() {
    this.Club = "";
    this.ChildHealth = "0";
    this.WomenHealth = "0";
    this.MenHealth = "0";
    this.ElderlyHealth = "0";
    this.HighBloodPresure = "0";
    this.Cancer = "0";
    this.CardioVascular = "0",
    this.General = "0",
    this.Diabetes = "0";
    this.Hyperlipidemia = "0";
    this.AdvancedInfantCpr = "0";
    this.ChildBirthPreperationCourse = "0";
    this.ConferencePregnantWomen = "0";
    this.ChildBirthPreperationCourseMarathon = "0";
    this.PersonalBreastFeedingAdvise = "0";
    this.PrepatoryMeetingForBreastfeeding = "0";
    this.SendMail = 1;
};

function UpdateIntrest() {
    this.Club = "";
    this.GovermentId = "";
    this.ChildHealth = false;
    this.WomenHealth = false;
    this.MenHealth = false;
    this.ElderlyHealth = false;
    this.HighBloodPressure = false;
    this.Cancer = false;
    this.Cardiovascular = false,
    this.General = false,
    this.Diabetes = false;
    this.HyperLipidermia = false;
};


function JoinEvent() {
    this.ActivityId = "";
    this.Club = "";
    this.SendMail = 1;

}

function ContactUSForm() {
    ContactName = "";
    ContactPhoneNumber = "";
    Clinic = "";
    Description = "";
    DoctorName = "";
    Subject = "";
    Attachment = "";
    this.SendMail = "1";
    this.SiteSource = null;
}

function MailContactUS() {
    ContactName = "";
    ContactPhoneNumber = "";
    ContactEmail = "";
    Description = "";
    PageTitle = "";
    PageURL = "";
    unitContactEmail = "";
    this.SendMail = "1";
}
function MedTourCallUS() {
    ContactPhoneNumber = "";
    this.SendMail = "1";
}
function JoinMommyLiss() {
    this.GovermentId = "",
    this.babyMassage = "";
    this.childBirthPreparetioCourse = "";
    this.personalBreastfeedingCourse = "";
    this.movmentInPregnancy = "";
    this.AdvanceRevivingBabies = "";
    this.pregnancyPreparetionMarathon = "";
    this.breastFeedingMeetings = "";
    this.twinsPregnancyPreparetionCourse = "";

}

function BasicValidation() {
    this.iDValidate = UIResource.Form_Error_ID;
    this.required = UIResource.Form_Error_Required;
    this.required_ID = UIResource.Form_Error_Required_ID;
    this.required_Password = UIResource.Form_Error_Required_Password;
    this.phoneError = UIResource.Form_Error_Phone;
    this.Email = UIResource.Form_Error_EMail;
    this.number = UIResource.Form_Error_Number;
    this.chars = UIResource.Form_Error_HebrewOnly;
    this.chkRequiered = UIResource.Form_Error_SubjectRequired;
    this.FreeText = UIResource.Form_Error_FreeTextChars;
    this.emailFormat = new RegExp(UIResource.Form_Email_RegEx);
    this.urlFormat = new RegExp(UIResource.Form_Url_RegEx);
    this.onlyHebrewPattern = new RegExp(UIResource.Form_Hebrew_RegEx);
    this.numbersAndTextPattern = new RegExp(UIResource.Form_NumbersAndText_RegEx);
    this.phonePattern = new RegExp(UIResource.Form_Phone_RegEx);
    this.numberPattern = new RegExp(UIResource.Form_Digits_RegEx);
    this.freeText = new RegExp(UIResource.Form_FreeText_RegEx);
    this.serviceFailure = UIResource.Form_Error_Unexpected;
    this.estimateBD = UIResource.Form_Error_Birthdate;
    this.chkDeliveryAorrive = UIResource.Form_Error_DeliveryRequired;
    this.fillALllMandatoryField = UIResource.Form_Mandatory_Text;
    this.inputToShort = UIResource.Form_Error_MinimumChars;
    this.PostCodeToShort = UIResource.Form_Error_PostCardMinimum;

    this.FirstNameTooLong = UIResource.Form_Error_FirstNameMaximum;
    this.LastNameTooLong = UIResource.Form_Error_LastNameMaximum;
    this.GovermentIdTooLong = UIResource.Form_Error_GovermentIdMaximum;
    this.PhoneTooLong = UIResource.Form_Error_PhoneTooLongMaximum;
    this.MobilePhoneTooLong = UIResource.Form_Error_MobilePhoneMaximum;
    this.EmailTooLong = UIResource.Form_Error_EmailMaximum;
    this.CityTooLong = UIResource.Form_Error_CityMaximum;
    this.StreetTooLong = UIResource.Form_Error_StreetMaximum;
    this.HouseNumberTooLong = UIResource.Form_Error_HouseNumberMaximum;
    this.PostCodeTooLong = UIResource.Form_Error_PostCardMaximum;
    this.DescriptionTooLong = UIResource.Form_Error_DescriptionMaximum;
    this.DoctorNameTooLong = UIResource.Form_Error_DoctorNameMaximum;
    this.ContactNameTooLong = UIResource.Form_Error_ContactNameMaximum;
    this.ContactPhoneNumberTooLong = UIResource.Form_Error_ContactPhoneNumberMaximum;
    this.ContactEmailTooLong = UIResource.Form_Error_ContactEmailMaximum;
    this.SubjectTooLong = UIResource.Form_Error_SubjectMaximum;
    this.Link1TooLong = UIResource.Form_Error_Link1Maximum;
    this.Link2TooLong = UIResource.Form_Error_Link2Maximum;
    this.ReplyTooLong = UIResource.Form_Error_ReplyMaximum;

    this.dateRegex = new RegExp(UIResource.Form_Date_RegEx);
    this.noEventChoosed = UIResource.Form_Error_NotEventPage;
    this.textBoxPattern = new RegExp(UIResource.Form_TextBox_RegEx);
    this.textBoxChars = UIResource.Form_Error_TextBoxChars;
    this.UrlInvalid = UIResource.Form_Url_Invalid;
    this.postalCodePattern = new RegExp(UIResource.Form_PostalCode_RegEx);
};

function LogSingInObj() {
    this.CaptchaKey = "";
    this.GovermentId = "";
    this.Password = "";
    this.CurrentPageUrl = "";
}

function BasicUserDetails() {
    this.FirstName = localStorage.FirstName;

    //localStorage.setItem('FirstName', user.FirstName); // save use firstName,LastName,Id and statusMsg in localStorage;
    //localStorage.setItem('LastName', user.LastName);
    //localStorage.setItem('PatientId', user.PatientId);
    //localStorage.setItem('StatusMsg', user.StatusMsg);
    //localStorage.setItem('TokenCreatedDate', user.TokenCreateDate);

    //localStorage.setItem('Phone1', user.Phone1);
    //localStorage.setItem('Phone2', user.Phone2);
    //localStorage.setItem('City', response.City);
    //localStorage.setItem('Address', response.Address);
    //localStorage.setItem('Postal', response.Postal);


}

function PersonalAreaForgotPassword() {

    var dtVal = $('#DOB').val().replace(/\-/g, '/');
    var IdVal = $('.LoginOtpFormContainer  #IDNumber').val();

    var tz = IdVal;
    if (tz[0] == 0) {
        IdVal = tz.substring(1);
    }

    var isDateValid = (ValidateDate(dtVal) && dtVal != "");
    var isIdValid = $(".LoginOtpFormContainer  #IDNumber").val() != "" && IdValidate(IdVal);


    //if all validation are ok
    if (isIdValid && isDateValid) {
        //hide validation errors
        $(".LoginOtpFormContainer  .help-block-date").css("visibility", "hidden");
        $(".LoginOtpFormContainer .help-block-id").css("visibility", "hidden");

        grecaptcha.execute();
        var captchaRes = grecaptcha.getResponse();

        var uData = { CaptchaKey: captchaRes, UserId: IdVal, DOB: dtVal };

        showLoader();
        $(".ServiceMsgResponse.Success").css("display", "none");
        $(".ServiceMsgResponse.Error").css("display", "none");

        $.ajax({
            type: 'POST',
            url: "/webapi/api/LoginController/ForgotPassword", //" + 'ID=' + IdVal + '&DOB=' + dtVal + "",
            data: JSON.stringify(uData),
            dataType: "json",
            headers: { 'Content-Type': 'application/json' },

            success: function (response) {
                grecaptcha.reset();
                hideLoader();
                if (response) {
                    $('.ServiceMsgResponse.Success').css('display', 'block');
                    $('.ServiceMsgResponse.Error').remove();
                    $('.login-form').remove();
                }
                else {
                    $('.ServiceMsgResponse.Error').text(ForgotPassword_NoContent);
                    $('.ServiceMsgResponse.Error').css('display', 'block');
                    $('.ServiceMsgResponse.Success').css('display', 'none');
                }
            },
            error: function (response) {
                grecaptcha.reset();
                $('.ServiceMsgResponse.Error').text(ForgotPassword_InternalErr);
                $('.ServiceMsgResponse.Error').css('display', 'block');
                $('.ServiceMsgResponse.Success').css('display', 'none');
                hideLoader();
            }
        });
    }
    else {
        grecaptcha.reset();
        if (!isDateValid) {
            $(".LoginOtpFormContainer .help-block-date").text(" תאריך לידה לא תקין :  dd/mm/yyyy");
        }
        $(".LoginOtpFormContainer .help-block-date").css("visibility", (isDateValid == false ? "visible" : "hidden"));
        $(".LoginOtpFormContainer  .help-block-id").css("visibility", (isIdValid == false ? "visible" : "hidden"));
    }
}

function PersonalAreaChangePassword() {
    var tempPasswordInput = $('#tempPassword').val();
    var newPasswordInput = $('#newPassword').val();
    var reEnterPasswordInput = $('#newPassword2').val();

    var passwordRegex = RegExp("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])[a-zA-Z0-9]{6,12}$");
    var isNewPassOk = passwordRegex.test(newPasswordInput);
    var isReEnterPasswordOk = passwordRegex.test(reEnterPasswordInput);
    var isPasswordsCompatible = newPasswordInput === reEnterPasswordInput
    var isAllOk = isNewPassOk && isPasswordsCompatible;

    //if all validation are ok
    if (isAllOk) {
        //hide validation errors
        $(".error.help-block-tempPassword").css("visibility", "hidden");
        $(".error.help-block-newPassword").css("visibility", "hidden");
        $(".error.help-block-newPassword2").css("visibility", "hidden");

        var userId = localStorage.ExtPatientId.replace('-', '');
        grecaptcha.execute();
        var captchaRes = grecaptcha.getResponse();
        var uData = { CaptchaKey: captchaRes, UserId: userId, TempPassword: tempPasswordInput, NewPassword: newPasswordInput, ReEnterPassword: reEnterPasswordInput };

        showLoader();
        $.ajax({
            type: 'POST',
            url: "/webapi/api/LoginController/ChangePassword",
            data: JSON.stringify(uData),
            dataType: "json",
            headers: { 'Content-Type': 'application/json' },

            success: function (response, event) {
                grecaptcha.reset();
                hideLoader();
                $('.ServiceMsgResponse.Success').css('display', 'block');
                $(".ServiceMsgResponse.Error").remove();
                $('.login-form').remove();

                // window.location.href = loginDefaultSource;
            },
            error: function (response) {
                grecaptcha.reset();
                $(".ServiceMsgResponse.Error").text(response.responseJSON.Message);
                $(".ServiceMsgResponse.Error").css("display", "block");
                hideLoader();
            }
        });
    }
    else {
        $('.help-block-newPassword').css('visibility', 'hidden');
        $('.help-block-newPassword2').css('visibility', 'hidden');

        if (isNewPassOk == false) {
            $('.help-block-newPassword').css('visibility', 'visible');
        }
        if (isPasswordsCompatible == false) {
            $('.help-block-newPassword2').css('visibility', 'visible');
        }

        grecaptcha.reset();
    }
}

//General 
JoinBeWell.prototype = new BasicDetails();
JoinEvent.prototype = new BasicDetails();
ContactUSForm.prototype = new BasicDetails();

function write2Log(LogContent) {
    console.log(LogContent);
}

function GetPRMErrorDescription(form, errorCode) {
    return UIResource["Form_" + form + "_PrmError_" + (errorCode + "").replace("-", "")];
}

function ChangeDateAndTimeFormat(originObj, timePropName, datePropName) {

    $(originObj).each(function () {


        if (!isEmpty(timePropName)) {
            this[timePropName] = this[timePropName].slice(0, 5);// Return only HH:MM 
        }
        if (!isEmpty(datePropName)) {

            this[datePropName + "_sort"] = new Date(this[datePropName]);  //add parameter for sorting by 
            this[datePropName] = (new Date(this[datePropName])).format("dd/MM/yyyy"); //returns format "dd-mm-yyyy"
        }

    });

    return originObj;

}

function isEmpty(obj) {

    // null and undefined are "empty"
    if (obj == null) return true;

    // Assume if it has a length property with a non-zero value
    // that that property is correct.
    if (obj.length > 0) return false;
    if (obj.length === 0) return true;

    // If it isn't an object at this point
    // it is empty, but it can't be anything *but* empty
    // Is it empty?  Depends on your application.
    if (typeof obj !== "object") return true;

    // Otherwise, does it have any properties of its own?
    // Note that this doesn't handle
    // toString and valueOf enumeration bugs in IE < 9
    for (var key in obj) {
        if (hasOwnProperty.call(obj, key)) return false;
    }

    return true;
}

//factory
TasmcFactoryFunc = function ($q, $http) {

    var factory = {};
    factory.GetDetailsIfLogin = function () {
        var deffered = $q.defer();
        $http({
            method: 'GET',
            url: '/WebApi/api/LoginController/GetLoggedInUser',
            headers: { 'Content-Type': 'application/json' }
        })
           .success(function (data, status, headers, config) {
               if (data == null) {
                   //no instruction found, error
                   deffered.resolve(null);
               }
               else {
                   $http({
                       method: 'POST',
                       url: '/WebApi/api/UserDetails/GetUserDetails',
                       data: UserDetails,
                       headers: { 'Content-Type': 'application/json' }
                   })
                .success(function (data, status, headers, config) {
                    deffered.resolve(data);
                })
                .error(function (data, status, headers, config) {
                    $log.error(data);
                    deffered.resolve(null);
                })

               }
           })
            .error(function (data, status, headers, config) {
                $log.error(data);
                deffered.resolve(null);
            });

        return deffered.promise;
    };

    return factory;


}
//Services

TasmcClubFormServiceFunc = function ($q, $http) {
    this.JoinRequest = function (UserDetails) {
        write2Log("JoinRequest Start");
        return $http({
            method: 'POST',
            url: '/WebApi/api/formscontroller/SendClubMembership',
            data: UserDetails,
            headers: { 'Content-Type': 'application/json' }
        })


    }
    this.SendContactUS = function (data) {
        write2Log("SendContactUS Start");
        return $http({
            method: 'POST',
            url: '/WebApi/api/formscontroller/SendContactUs',
            data: data,
            headers: { 'Content-Type': 'application/json' }
        });

    }
    // AND IsQueueReservationEnabled=true
    var url = "/_api/search/query?querytext='IsQueueReservationEnabledOWSBOOL:1 AND contenttypeid:" + UIResource.unit_contenttype_id + "'&selectproperties=%27Title,Path,Filename%27&sortlist=%27Title:ascending%27&rowlimit=500&QueryTemplatePropertiesUrl='spfile://webroot/queryparametertemplate.xml'";
    //var url = "/_api/search/query?querytext='IsQueueReservationEnabledOWSBOOL:1 AND contenttypeid:" + UIResource.unit_contenttype_id +     "'&selectproperties=%27Title,Path,Filename%27&rowlimit=500&QueryTemplatePropertiesUrl='spfile://webroot/queryparametertemplate.xml'";

    this.ContactUsGetUnits = function () {
        write2Log("ContactUsGetUnits Start");
        return $http({
            method: 'GET',
            url: url,
            headers: { "Accept": "application/json;odata=verbose" }
        });
    }
    this.GeneralRequest = function (data, reqUrl) {
        write2Log("GeneralRequest Start");
        return $http({
            method: 'POST',
            url: reqUrl,
            data: data,
            headers: { 'Content-Type': 'application/json' }
        });

    }
    this.GetDetails = function (reqUrl) {
        write2Log("GeneralRequest Start");
        return $http({
            method: 'Get',
            url: reqUrl,
            headers: { 'Content-Type': 'application/json' }
        });

    }
    this.getUserDeatilIfRegister = function (reqUrl) {
        var serviceThis = this;
        //var returnObj={}
        var deferred = $q.defer();

        serviceThis.GetDetails(reqUrl).then(function (response) {
            if (response.data != null) {
                var reqData = { "GovermentId": response.data.GovermentId };
                serviceThis.GeneralRequest(reqData, "/WebApi/api/UserDetails/GetUserDetails").then(function (response) {
                    deferred.resolve(response);
                }, function (response) {
                    deferred.resolve(null);
                });
            }
            else {
                deferred.resolve(null);
            }
        }, function (response) {
            deferred.resolve(null);
        });

        return deferred.promise;




    }
};


TasmcExpertCorrespondenceServiceFunc = function ($http) {
    this.SendCorrespondence = function (UserDetails) {
        write2Log("ExpertCorrespondenceRequest Start");
        return $http({
            method: 'POST',
            url: '/WebApi/api/formscontroller/ExpertCorrespondence',
            data: UserDetails,
            headers: { 'Content-Type': 'application/json' }
        });


    }

    this.SendCorrespondenceAnswer = function (UserDetails) {
        write2Log("ExpertCorrespondenceAnswerRequest Start");
        return $http({
            method: 'POST',
            url: '/WebApi/api/formscontroller/ExpertCorrespondenceAnswer',
            data: UserDetails,
            headers: { 'Content-Type': 'application/json' }
        });
    }
}

TasmcClubsEventServiceFunc = function ($http, $q) {
    this.UpdateEvents = function (UserDetails) {
        write2Log("UpdateEvents Start");
        return $http({
            method: 'POST',
            url: '/WebApi/api/formscontroller/JoinActivity',
            data: UserDetails,
            headers: { 'Content-Type': 'application/json' }
        })
    }
    this.getEventsForActivity = function (EventData) {
        write2Log("getEventsForActivity Start");


        return $http({
            method: 'POST',
            url: '/WebApi/api/events/GetMarketingActivities',
            data: EventData,
            headers: { 'Content-Type': 'application/json' }
        });

    }

};

//Directive
validateIdFunc = function () {
    return {
        require: 'ngModel',
        link: function (scope, elem, attr, ngModel) {
            var retval = false;
            ngModel.$parsers.unshift(function (value) {
                var retVal = false;
                try {
                    var identityCard = value;
                    if (identityCard == "" || identityCard == '' || identityCard == '000000000') {
                        ngModel.$setValidity('govermentId', retVal === true);
                        return value;
                    }
                    var startIndex = 9 - identityCard.length;
                    var test = 0;

                    for (var index = startIndex; index < 9; index++) {
                        var charIndex = index + identityCard.length - 9;
                        var dig = parseInt(identityCard.charAt(charIndex), 10);
                        var mul = parseInt(((index % 2) + 1) * dig, 10) + '';

                        for (var i = 0; i < mul.length; i++) {
                            test += parseInt(mul.charAt(i), 10);
                        }
                    }
                    retVal = ((test % 10) == 0);
                }
                catch (err) {
                    ngModel.$setValidity('govermentId', retVal === true);
                    return value;
                }
                ngModel.$setValidity('govermentId', retVal === true);
                return value;

            });
        }
    };
}

phoneVerifyFunc = function () {
    return {
        require: 'ngModel',
        link: function (scope, elem, attr, ngModel) {
            var valid = false;
            ngModel.$parsers.unshift(function (value) {
                var valid = false;
                var TelephoneTouched = ngModel.$$parentForm.Telephone.$dirty;
                var MobileTouched = ngModel.$$parentForm.MobilePhone.$dirty;
                var Telephone = ngModel.$$parentForm.Telephone.$viewValue;
                var Mobile = ngModel.$$parentForm.MobilePhone.$viewValue;

                ngModel.$$parentForm.Telephone.$setValidity('phoneVerify', ((Mobile != undefined && Mobile != "") || (Telephone != undefined && Telephone != "")) && (TelephoneTouched == true || MobileTouched == true));
                ngModel.$$parentForm.MobilePhone.$setValidity('phoneVerify', (Mobile != undefined && Mobile != "") || (Telephone != undefined && Telephone != "") && (TelephoneTouched == true || MobileTouched == true));
                console.log((Mobile != undefined && Mobile != "") || (Telephone != undefined && Telephone != ""));
                return value;
            });
            ngModel.$setValidity('phoneVerify', false);
            return "";

        }
    };
}

ngEnterFunc = function () {
    return function (scope, element, attrs) {
        element.bind("keypress", function (e) {
            if (e.which === 13 && e.target.tagName.toLowerCase() != "textarea") {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEnter, { 'e': e });
                });
                e.preventDefault();
            }
        });
    }
}

select2Func = function ($timeout, $parse) {
    return {
        restrict: 'AC',
        require: 'ngModel',
        link: function (scope, element, attrs) {
            console.log(attrs);
            $timeout(function () {
                element.select2();
                element.select2Initialized = true;
            });

            var refreshSelect = function () {
                if (!element.select2Initialized) return;
                $timeout(function () {
                    element.trigger('change');
                });
            };

            var recreateSelect = function () {
                if (!element.select2Initialized) return;
                $timeout(function () {
                    element.select2('destroy');
                    element.select2();
                });
            };

            scope.$watch(attrs.ngModel, refreshSelect);

            if (attrs.ngOptions) {
                var list = attrs.ngOptions.match(/ in ([^ ]*)/)[1];
                // watch for option list change
                scope.$watch(list, recreateSelect);
            }

            if (attrs.ngDisabled) {
                scope.$watch(attrs.ngDisabled, refreshSelect);
            }
        }
    };
};


checkBoxReqFunc = function () {

    return {
        require: 'ngModel',
        link: function (scope, elem, attr, ngModel) {
            var valid = false;
            ngModel.$parsers.unshift(function (value) {
                var x = elem;
                ngModel.$setValidity('checkRequired', value);
                return "";

            });
            ngModel.$setValidity('checkRequired', true);
            return "";

        }
    };
};

//Controllers

//Join The Clob
BaseJoinClubCtrlFunc = function (ClubFormCtrlAlias, TasmcClubFormService, vcRecaptchaService, $timeout, $window) {

    ClubFormCtrlAlias.Join = "";
    ClubFormCtrlAlias.originalState = new JoinBeWell();

    ClubFormCtrlAlias.ReCaptchNotConfirm = false;
    ClubFormCtrlAlias.publicKey = publicKey;
    ClubFormCtrlAlias.ServiceMsgResponse = "";
    ClubFormCtrlAlias.ValidationObj = new BasicValidation();
    ClubFormCtrlAlias.services = TasmcClubFormService;

    ClubFormCtrlAlias.InvisibleRecaptchaFirstExecute = function () {
        grecaptcha.execute();
    };

    $timeout(function () {
        ClubFormCtrlAlias.submitForm = function () {

            ClubFormCtrlAlias.Join.reCaptchaResponse = grecaptcha.getResponse();  // vcRecaptchaService.getResponse();
            //if (vcRecaptchaService.getResponse() === "") { //if string is empty
            if (grecaptcha.getResponse() === "") { //if string is empty
                ClubFormCtrlAlias.ReCaptchNotConfirm = true;

            }
            else {
                ClubFormCtrlAlias.ReCaptchNotConfirm = false;
            }

            ClubFormCtrlAlias.JoinClub.chkDelivery.$valid = jQuery("#chkDelivery").attr("checked") == "checked";

            if (ClubFormCtrlAlias.JoinClub.chkDelivery.$valid == false || ClubFormCtrlAlias.JoinClub.$invalid || ClubFormCtrlAlias.Join.ReCaptchNotConfirm === true) {
                ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.fillALllMandatoryField;

                angular.forEach(ClubFormCtrlAlias.JoinClub.$error, function (field) {
                    angular.forEach(field, function (errorField) {
                        if (errorField != undefined) {
                            errorField.$setDirty();
                        }
                    })

                });
                grecaptcha.reset();
                // angular.element('[name="ClubFormCtrlAlias.JoinClub"]').find('.ng-invalid:visible:first').focus();
                ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.fillALllMandatoryField;
            }
            else {

                ClubFormCtrlAlias.ServiceMsgResponse = "";
                showLoader();
                write2Log(ClubFormCtrlAlias.Join);
                ClubFormCtrlAlias.services.JoinRequest(ClubFormCtrlAlias.Join)
                .then(function successCallback(response) {
                    grecaptcha.reset();
                    if (response.data.ResponseErrorCode == 1) {
                        if (ClubFormCtrlAlias.Join.Club == 2) {
                            $window.location.href = LandingPages.JoinBeWellThankYou;
                        }
                        else if (ClubFormCtrlAlias.Join.Club == 1) {
                            $window.location.href = LandingPages.JoinMamiLisThankYou;
                        }
                    }
                    else {
                        //ClubFormCtrlAlias.ServiceMsgResponse = response.data.Description;
                        ClubFormCtrlAlias.ServiceMsgResponse = GetPRMErrorDescription(PrmTypes.Join, response.data.ResponseErrorCode)
                        //vcRecaptchaService.reload();
                        //  grecaptcha.execute();
                    }

                    hideLoader();

                }, function errorCallback(response) {
                    write2Log("error");
                    write2Log(response);
                    ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;
                    //vcRecaptchaService.reload();
                    //   grecaptcha.execute();
                    write2Log(ClubFormCtrlAlias.ValidationObj.serviceFailure);
                    grecaptcha.reset();
                    hideLoader();
                });
            }
        };
    }, 2000);
};

JoinBeWellCtrlFunc = function ($controller) {
    var ClubFormCtrlAlias = this;
    ClubFormCtrlAlias.SubTitle = "נרשמים עכשיו לbeWell של המרכז הרפואי ת\"א ע\"ש סוראסקי ומתחילים להינות מדרך חיים בריאה ואיכות חיים. ההצטרפות חינם!"
    $controller('BaseJoinClubCtrl', { ClubFormCtrlAlias: ClubFormCtrlAlias });
    ClubFormCtrlAlias.birthdayInputShow = false;
    ClubFormCtrlAlias.Join = new JoinBeWell();
    ClubFormCtrlAlias.Join.Club = 2;

};

JoinMommyLissClubCtrlFunc = function ($controller) {
    var ClubFormCtrlAlias = this;
    $controller('BaseJoinClubCtrl', { ClubFormCtrlAlias: ClubFormCtrlAlias });
    ClubFormCtrlAlias.isShowBirthdayInput = true;
    ClubFormCtrlAlias.SubTitle = "  בהריון? שוקלת הריון? הצטרפי למועדון מאמי ליס ותהני מהטבות במגוון בתי עסק המתאימים במיוחד לאם ולאם שבדרך " +
        "וגם מתנת לידה מקסימה ליולדות בליס";
    ClubFormCtrlAlias.Join = new JoinBeWell();
    ClubFormCtrlAlias.chkDelivery = true;
    ClubFormCtrlAlias.Join.Club = 1;
    ClubFormCtrlAlias.formData = {};
    ClubFormCtrlAlias.formData.date = "";
    ClubFormCtrlAlias.opened = false;

    //Datepicker
    ClubFormCtrlAlias.dateOptions = {
        'year-format': "'yy'",
        'show-weeks': false
    };
};

//Event
ClubEventCtrlFunc = function (TasmcClubFormService, TasmcClubsEventServiceFunc, vcRecaptchaService, $timeout, $window) {
    var ClubFormCtrlAlias = this;
    ClubFormCtrlAlias.isEventDetailsHide = false;
    ClubFormCtrlAlias.ServiceMsgResponse = "";
    ClubFormCtrlAlias.publicKey = publicKey;
    ClubFormCtrlAlias.ReCaptchNotConfirm = "";

    ClubFormCtrlAlias.InitData = function (club, activityId) {
        showLoader();
        TasmcClubFormService.getUserDeatilIfRegister("/WebApi/api/LoginController/GetLoggedInUser")
      .then(function successCallback(response) {
          hideLoader();
          ClubFormCtrlAlias.EventData = new JoinEvent();

          if (response != null) {
              ClubFormCtrlAlias.EventData = response.data;
          }

          ClubFormCtrlAlias.EventData.Club = club;
          ClubFormCtrlAlias.EventData.ActivityId = activityId;

      }, function errorCallback(response) {
          hideLoader();
          write2Log("error")
          write2Log(response)
      });
    }

    ClubFormCtrlAlias.ValidationObj = new BasicValidation();



    $timeout(function () {
        ClubFormCtrlAlias.submitForm = function () {
            ClubFormCtrlAlias.EventData.reCaptchaResponse = grecaptcha.getResponse(); //vcRecaptchaService.getResponse();
            //if (vcRecaptchaService.getResponse() === "") { //if string is empty
            if (grecaptcha.getResponse() === "") {
                ClubFormCtrlAlias.ReCaptchNotConfirm = true;
            }
            else {
                ClubFormCtrlAlias.ReCaptchNotConfirm = false;
            }

            ClubFormCtrlAlias.EventForm.chkDelivery.$valid = jQuery("#chkDelivery").attr("checked") == "checked";

            if (ClubFormCtrlAlias.EventForm.chkDelivery.$valid == false || ClubFormCtrlAlias.EventForm.$invalid || ClubFormCtrlAlias.EventData.ReCaptchNotConfirm === true) {
                angular.forEach(ClubFormCtrlAlias.EventForm.$error, function (field) {
                    angular.forEach(field, function (errorField) {
                        if (errorField != undefined) {
                            errorField.$setDirty();
                        }
                    })
                });
                angular.element('[name="ClubFormCtrlAlias.EventForm"]').find('.ng-invalid:visible:first').focus();
                ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.fillALllMandatoryField;
            }
            else {
                ClubFormCtrlAlias.EventData.EstimatedBirthDate = "";
                if (ClubFormCtrlAlias.EventData.Club == 1) {
                    ClubFormCtrlAlias.EventData.EstimatedBirthDate = jQuery("#EstimatedBirthDate").val();
                }

                showLoader();
                TasmcClubsEventServiceFunc.UpdateEvents(ClubFormCtrlAlias.EventData)

                .then(function successCallback(response) {
                    hideLoader()
                    grecaptcha.reset();
                    if (response.data.ResponseErrorCode == 1) {
                        if (ClubFormCtrlAlias.EventData.Club == 2) {
                            $window.location.href = LandingPages.JoinActivityBeWell;
                        }
                        else if (ClubFormCtrlAlias.EventData.Club == 1) {
                            $window.location.href = LandingPages.JoinActivityMamiLis;
                        }
                    }
                    else {
                        //ClubFormCtrlAlias.ServiceMsgResponse = response.data.Description;
                        ClubFormCtrlAlias.ServiceMsgResponse = GetPRMErrorDescription(PrmTypes.JoinActivity, response.data.ResponseErrorCode)
                        //vcRecaptchaService.reload();
                        //    grecaptcha.execute();
                    }


                }, function errorCallback(response) {
                    hideLoader();
                    write2Log("UpdateEvents Error");
                    ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;
                    write2Log(response);
                    //vcRecaptchaService.reload();
                    //  grecaptcha.execute();
                });

            }
        };

    }, 2000);

}


//Contact US

ContactUsFormCtrlFunc = function (TasmcClubFormService, vcRecaptchaService, $timeout, $window) {
    var ClubFormCtrlAlias = this;

    ClubFormCtrlAlias.ReCaptchNotConfirm = false;
    ClubFormCtrlAlias.Counter = 0;
    ClubFormCtrlAlias.publicKey = publicKey;
    ClubFormCtrlAlias.ServiceMsgResponse = "";
    ClubFormCtrlAlias.dateOptions = {
        'starting-day': new Date(),
    };
    ClubFormCtrlAlias.Units = "";
    ClubFormCtrlAlias.ContactUsData = new ContactUSForm();
    ClubFormCtrlAlias.ContactUsData.SendMail = 1;
    ClubFormCtrlAlias.ServiceMsgResponse = "";

    ClubFormCtrlAlias.InvisibleRecaptchaFirstExecute = function () {
        grecaptcha.execute();
    };

    //margalit: comment out temporarily because this throws a bug if user is logged in
    /*showLoader();

    TasmcClubFormService.getUserDeatilIfRegister("/WebApi/api/LoginController/GetLoggedInUser")
      .then(function successCallback(response) {
          hideLoader();
          if (response != null) {
              ClubFormCtrlAlias.ContactUsData = response.data;
              ClubFormCtrlAlias.ContactUsData.SendMail = 1;
          }

      }, function errorCallback(response) {
          hideLoader();
          write2Log("error");
          write2Log(response);
          grecaptcha.reset();
      });*/


    ClubFormCtrlAlias.originalState = new ContactUSForm();
    ClubFormCtrlAlias.ValidationObj = new BasicValidation();
    ClubFormCtrlAlias.services = TasmcClubFormService;


    ClubFormCtrlAlias.submitForm = function () {
        ClubFormCtrlAlias.ContactUsData.reCaptchaResponse = grecaptcha.getResponse();
        if (grecaptcha.getResponse() === "") { //if string is empty
            ClubFormCtrlAlias.ReCaptchNotConfirm = true;
        }
        else {
            ClubFormCtrlAlias.ReCaptchNotConfirm = false;
        }

        if (ClubFormCtrlAlias.ContactUs.$invalid || ClubFormCtrlAlias.ContactUsData.reCaptchaResponse === "") {
            angular.forEach(ClubFormCtrlAlias.ContactUs.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    if (errorField != undefined) {
                        errorField.$setDirty();
                    }
                })
            });
            grecaptcha.reset();
            angular.element('[name="ClubFormCtrlAlias.ContactUs"]').find('.ng-invalid:visible:first').focus();
            ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.fillALllMandatoryField;
        }
        else {
            jQuery(".formbackColor").append("")
            write2Log("ContactUsForCtrlFunc")
            ClubFormCtrlAlias.ContactUsData.Subject = $(".SubjectID").text();
            write2Log(ClubFormCtrlAlias.ContactUsData.Subject)
            showLoader();
            $timeout(function () {
                ClubFormCtrlAlias.services.SendContactUS(ClubFormCtrlAlias.ContactUsData)
                 .then(function successCallback(response) {
                     grecaptcha.reset();
                     hideLoader();
                     write2Log("SendContactUS Success");
                     write2Log(response);
                     grecaptcha.reset();
                     if (response.data.ResponseErrorCode == 1) {
                         var thankYouPage = _spPageContextInfo.webServerRelativeUrl + LandingPages.ContactUsPRM;

                         if (_spPageContextInfo.webServerRelativeUrl == "/" || _spPageContextInfo.webServerRelativeUrl == "/sites/en") {
                             thankYouPage = LandingPages.ContactUsPRM;
                         }

                         $window.location.href = thankYouPage;
                     }

                     else {
                         //ClubFormCtrlAlias.ServiceMsgResponse = response.data.Description;
                         ClubFormCtrlAlias.ServiceMsgResponse = GetPRMErrorDescription(PrmTypes.PersonalInfo, response.data.ResponseErrorCode);

                     }

                 }, function errorCallback(response) {
                     grecaptcha.reset();
                     hideLoader();
                     write2Log("SendContactUS Error");
                     write2Log(response);
                     ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;

                 });
            }, 3000);
        }
    };
}

ContactDoctorFormCtrlFunc = function (TasmcClubFormService, TasmcFactory, vcRecaptchaService, $timeout, $window) {
    var ClubFormCtrlAlias = this;
    var currentUnitId = getParameterByName("UnitId");
    ClubFormCtrlAlias.publicKey = publicKey;
    ClubFormCtrlAlias.factory = TasmcFactory;
    ClubFormCtrlAlias.isDisable = false;
    ClubFormCtrlAlias.isSubmitedPressed = false

    ClubFormCtrlAlias.service = TasmcClubFormService;
    ClubFormCtrlAlias.Clinics = [];
    ClubFormCtrlAlias.Subjects = [{ "subject": UIResource.Form_Appointment_Request_Text, "value": "1" }, { "subject": UIResource.Form_Appointment_Update_Text, "value": "2" }, { "subject": UIResource.Form_Appointment_Cancel_Text, "value": "3" }]//JSON.parse(SubjectArr);
    ClubFormCtrlAlias.Join = new ContactUSForm();
    ClubFormCtrlAlias.Join.SendMail = 1;
    ClubFormCtrlAlias.Join.Clinic = "";
    ClubFormCtrlAlias.Join.CurrentClinic = null;

    showLoader();
    ClubFormCtrlAlias.InvisibleRecaptchaFirstExecute = function () {
        grecaptcha.execute();
    };

    $timeout(function () {
        TasmcClubFormService.getUserDeatilIfRegister("/WebApi/api/LoginController/GetLoggedInUser")
       .then(function successCallback(response) {
           grecaptcha.reset();
           if (response != null && response.data.ResponseErrorCode != -1) {
               ClubFormCtrlAlias.Join = response.data;
               grecaptcha.reset();
           }
           else {
               write2Log("getUserDeatilIfRegister error accured");
               write2Log(response);
               grecaptcha.reset();
           }

           ClubFormCtrlAlias.GetClinics();

       }, function errorCallback(response) {
           write2Log("error");
           write2Log(response);

           ClubFormCtrlAlias.GetClinics();
           grecaptcha.reset();
       });
    }, 1000);


    ClubFormCtrlAlias.ReCaptchNotConfirm = false;
    ClubFormCtrlAlias.publicKey = publicKey;
    ClubFormCtrlAlias.ServiceMsgResponse = "";

    ClubFormCtrlAlias.ValidationObj = new BasicValidation();
    $timeout(function () {
        ClubFormCtrlAlias.submitForm = function () {
            ClubFormCtrlAlias.isSubmitedPressed = true;
            ClubFormCtrlAlias.Join.reCaptchaResponse = grecaptcha.getResponse(); //vcRecaptchaService.getResponse();
            //if (vcRecaptchaService.getResponse() === "") { //if string is empty
            if (grecaptcha.getResponse() === "") { //if string is empty
                ClubFormCtrlAlias.ReCaptchNotConfirm = true;
            }
            else {
                ClubFormCtrlAlias.ReCaptchNotConfirm = false;
            }

            ClubFormCtrlAlias.JoinClub.chkDelivery.$valid = jQuery("#chkDelivery").attr("checked") == "checked";
            if (ClubFormCtrlAlias.JoinClub.chkDelivery.$valid == false || ClubFormCtrlAlias.JoinClub.$invalid || ClubFormCtrlAlias.Join.ReCaptchNotConfirm === true) {
                angular.forEach(ClubFormCtrlAlias.JoinClub.$error, function (field) {
                    angular.forEach(field, function (errorField) {
                        if (errorField != undefined) {
                            errorField.$setDirty();
                        }
                    })

                });
                grecaptcha.reset();
                angular.element('[name="ClubFormCtrlAlias.JoinClub"]').find('.ng-invalid:visible:first').focus();
                ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.fillALllMandatoryField;
            }
            else {
                write2Log("ContactUsForCtrlFunc")

                ClubFormCtrlAlias.Join.Subject = ClubFormCtrlAlias.Join.AppointmentSubject.value;
                showLoader();
                ClubFormCtrlAlias.service.SendContactUS(ClubFormCtrlAlias.Join)

                 .then(function successCallback(response) {
                     grecaptcha.reset();
                     if (response.data.ResponseErrorCode == 1) {
                         $window.location.href = LandingPages.Appointment;
                     }
                     else {
                         //ClubFormCtrlAlias.ServiceMsgResponse = response.data.Description;
                         ClubFormCtrlAlias.ServiceMsgResponse = GetPRMErrorDescription(PrmTypes.Join, response.data.ResponseErrorCode)
                         grecaptcha.reset();
                     }

                     hideLoader();
                 }, function errorCallback(response) {
                     hideLoader();

                     write2Log("SendContactUS Error");
                     write2Log(response);
                     ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;
                     //vcRecaptchaService.reload();
                     grecaptcha.reset();
                 });
            }
        };
    }, 2000);

    ClubFormCtrlAlias.GetClinics = function () {
        //Fill the units select
        $timeout(function () {
            ClubFormCtrlAlias.service.ContactUsGetUnits()
               .then(function successCallback(response) {
                   write2Log("ContactUsGetUnits Success");
                   grecaptcha.reset();
                   if (response.data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results.length > 0) {

                       $.each(response.data.d.query.PrimaryQueryResult.RelevantResults.Table.Rows.results, function () {
                           var title = this.Cells.results[2].Value;
                           var path = this.Cells.results[3].Value;
                           var fileName = this.Cells.results[4].Value;

                           var fullPath = path + "/" + fileName + ".aspx";

                           ClubFormCtrlAlias.Clinics.push(title);

                           if (currentUnitId != null && fullPath.toLowerCase().indexOf(currentUnitId.toLowerCase()) != -1) {
                               ClubFormCtrlAlias.Join.CurrentClinic = { Title: title, Url: path.replace(UIResource.site_admin_url, UIResource.site_anon_url) };
                               ClubFormCtrlAlias.Join.Clinic = title;
                               //ClubFormCtrlAlias.isDisable = true;
                           }
                       });
                       write2Log(ClubFormCtrlAlias.Clinics);
                   }
                   else {
                       write2Log("ContactUsGetUnits No Value");
                       grecaptcha.reset();
                   }

                   hideLoader();
               },
                function errorCallback(response) {
                    hideLoader();
                    write2Log("ContactUsGetUnits Error");
                    write2Log(response);
                    grecaptcha.reset();
                });
        }, 1000);
    };
    hideLoader();
}

ContactUsMailFunc = function (TasmcClubFormService, $window) {
    var ClubFormCtrlAlias = this;
    ClubFormCtrlAlias.MailContactUS = new MailContactUS();
    ClubFormCtrlAlias.ValidationObj = new BasicValidation();
    ClubFormCtrlAlias.services = TasmcClubFormService;
    ClubFormCtrlAlias.submitForm = function () {
        {
            if (ClubFormCtrlAlias.ContactMailForm.$invalid) {
                angular.forEach(ClubFormCtrlAlias.ContactMailForm.$error, function (field) {
                    angular.forEach(field, function (errorField) {
                        var el = angular.element(document.querySelector("#" + errorField.$name));
                        el.attr("aria-invalid", "true");
                        el.addClass("ng-touched");
                        if (errorField != undefined) {
                            errorField.$setDirty();
                        }
                    })
                });
                angular.element('[name="ClubFormCtrlAlias.ContactMailForm"]').find('.ng-invalid:visible:first').focus();
                jQuery(".GeneralErrorMsg").css("display", "block");
            }
            else {
                jQuery.each(ClubFormCtrlAlias.MailContactUS, function (title) {
                    jQuery("#" + title).attr("aria-invalid", "false");
                });
                jQuery(".GeneralErrorMsg").css("display", "none");
                showLoader(); 0
                //For unit/surgery page, the recipient email is the emali field, displayed in the unit details control.
                ClubFormCtrlAlias.MailContactUS.unitContactEmail = jQuery("#ContactUsMailForm").attr("data-mail");
                ClubFormCtrlAlias.MailContactUS.PageURL = window.location.href;
                ClubFormCtrlAlias.MailContactUS.WebUrl = _spPageContextInfo.webServerRelativeUrl;

                ClubFormCtrlAlias.services.GeneralRequest(ClubFormCtrlAlias.MailContactUS, "/WebApi/api/formscontroller/ContactUsByMail")
                    .then(function successCallback(response) {
                        write2Log("SendContactUsMail Success");
                        write2Log(response);
                        grecaptcha.reset();
                        $window.location.href = LandingPages.ContactUsMail;

                    }, function errorCallback(response) {
                        hideLoader();
                        write2Log("ContactUsMailFunc Error");
                        write2Log(response);

                        ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;

                    });
            }
        }

    }
}

//Log In
TasmcLogAndSingInFunc = function (TasmcClubFormService, $timeout, $window, vcRecaptchaService) {


    var ClubFormCtrlAlias = this;
    angular.element('[name="ClubFormCtrlAlias.LogInForm"]').find('input:first').focus();
    ClubFormCtrlAlias.DisplayLoader = false;
    ClubFormCtrlAlias.publicKey = publicKey;
    ClubFormCtrlAlias.Title = "כניסה";
    ClubFormCtrlAlias.logIN = new LogSingInObj();
    ClubFormCtrlAlias.trials = 0;
    ClubFormCtrlAlias.ValidationObj = new BasicValidation();
    ClubFormCtrlAlias.ValidationObj.serviceResonse = "";
    if (isMommyLiss == false || isBeWellSignedIN == true) { //TODO: Any business logic here?????????????????????????????????????????????
        ClubFormCtrlAlias.isPasswordReq = true;
    }



    ClubFormCtrlAlias.InvisibleRecaptchaFirstExecute = function () {
        grecaptcha.execute();
    },


    ClubFormCtrlAlias.isCaptchShow == true;
    ClubFormCtrlAlias.submitForm = function () {
        ClubFormCtrlAlias.ServiceMsgResponse = "";
        if (ClubFormCtrlAlias.LogInForm.$invalid) {
            grecaptcha.reset();
            angular.forEach(ClubFormCtrlAlias.LogInForm.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    if (errorField != undefined) {
                        errorField.$setDirty();
                    }
                })
            });
            angular.element('[name="ClubFormCtrlAlias.LogSingInObj"]').find('.ng-invalid:visible:first').focus();
            ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.fillALllMandatoryField;
        }
        else {
            showLoader();
            $timeout(function () {
                write2Log("ClubFormCtrlAlias.TasmcLogAndSingc");
                ClubFormCtrlAlias.services = TasmcClubFormService;
                //ClubFormCtrlAlias.logIN.CaptchaKey = "936DA01F-9ABD-4D9D-80C7-02AF85C822A8"; //TODO - What goes here? How do I send key to                 server????????????????????????????????????????
                ClubFormCtrlAlias.logIN.CaptchaKey = grecaptcha.getResponse();//vcRecaptchaService.getResponse();
                ClubFormCtrlAlias.logIN.CurrentPageUrl = getParameterByName("LoginUrl");
                //ClubFormCtrlAlias.logIN.GovernmentId = ClubFormCtrlAlias.LogInForm.UserName;
                //ClubFormCtrlAlias.logIN.Password = ClubFormCtrlAlias.LogInForm.Password;

                try {
                    var tz = ClubFormCtrlAlias.logIN.GovermentId;
                    //remove two chars from t.z. with prefix 00
                    if (tz[0] == 0 && tz[1] == 0)
                    {
                        ClubFormCtrlAlias.logIN.GovermentId = tz.substring(2);
                    }
                    //remove char from t.z. with prefix 0
                    else if (tz[0] == 0) {
                        ClubFormCtrlAlias.logIN.GovermentId = tz.substring(1);
                    }
                    
                }
                catch (err) {
                    console.log("error in login submit form");
                }


                ClubFormCtrlAlias.services.GeneralRequest(ClubFormCtrlAlias.logIN, "/WebApi/api/LoginController/Login")
                .then(function successCallback(response) {
                    hideLoader();
                    ClubFormCtrlAlias.trials++;
                    if (ClubFormCtrlAlias.trials == 3) {
                        ClubFormCtrlAlias.isCaptchShow = true;
                    }

                    write2Log(response);
                    write2Log(ClubFormCtrlAlias.ValidationObj.serviceResonse);
                    grecaptcha.reset();

                    SetLocalStorageFromUser(response.data);

                    //If success redirect to source
                    if (response.data.StatusMsg == "Success") {
                        var source = getParameterByName("Source");
                        var token = getParameterByName("token");

                        if (response.data.IsTempPwd) {
                            window.location.href = passwordResetUrl;
                        }

                        else if (source != null) {
                            var href = decodeURIComponent(source);

                            if (token == "1") {
                                href += "?sessid=" + response.data.Sessid;
                            }
                            window.location.href = href;
                        }
                        else {
                            window.location.href = loginDefaultSource;
                        }
                    }
                    else {
                        //vcRecaptchaService.reload();
                        //   grecaptcha.execute();
                        //ClubFormCtrlAlias.ServiceMsgResponse = response.data.Description;
                        ClubFormCtrlAlias.ServiceMsgResponse = GetPRMErrorDescription(PrmTypes.Login, response.data.ErrorCode)
                        grecaptcha.reset();
                    }

                }, function errorCallback(response) {
                    grecaptcha.reset();
                    //vcRecaptchaService.reload();
                    // grecaptcha.execute();
                    hideLoader();
                    ClubFormCtrlAlias.trials++;
                    write2Log("logInSingIN error");
                    if (ClubFormCtrlAlias.trials == 3) {
                        ClubFormCtrlAlias.isCaptchShow = true;
                    }
                    write2Log("logInSingIN error");
                    write2Log(response);
                    //ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;
                    ClubFormCtrlAlias.ServiceMsgResponse = "סיסמה או ת.ז. שגויים";
                    write2Log(ClubFormCtrlAlias.ValidationObj.serviceResonse);
                    grecaptcha.reset();
                });
            }, 2000);
        }

    };
}

//Update

TasmcUpdateDetailsFunc = function (TasmcClubFormService, vcRecaptchaService, $timeout, $window) {


    var ClubFormCtrlAlias = this;
    ClubFormCtrlAlias.ServiceMsgResponse = "";
    ClubFormCtrlAlias.ServiceMsgResponseUpper = "";
    // ClubFormCtrlAlias.ValidationObj = new BasicValidation();
    //ClubFormCtrlAlias.originalState = new JoinBeWell();
    ClubFormCtrlAlias.service = TasmcClubFormService;
    ClubFormCtrlAlias.isDisable = true;
    ClubFormCtrlAlias.ReCaptchNotConfirm = false;
    ClubFormCtrlAlias.Join = new BasicUserDetails();
    ClubFormCtrlAlias.publicKey = publicKey;

    ClubFormCtrlAlias.InvisibleRecaptchaFirstExecute = function () {
        grecaptcha.execute();
    };

    showLoader();
    $timeout(function () {
        ClubFormCtrlAlias.service.GetDetails("/WebApi/api/LoginController/GetLoggedInUser")
          .then(function successCallback(response) {
              write2Log("GetDetails Success");
              grecaptcha.reset();
              if (response.data == null) {
                  $window.location.href = loginPage;
              }
              else {
                  ClubFormCtrlAlias.Join.GovermentId = response.data.GovermentId;
                  ClubFormCtrlAlias.getIntrest = { "GovermentId": ClubFormCtrlAlias.Join.GovermentId }
                  ClubFormCtrlAlias.service.GeneralRequest(ClubFormCtrlAlias.getIntrest, "/WebApi/api/UserDetails/GetUserDetails")
               .then(function successCallback(response) {
                   hideLoader();
                   if (response.data.ResponseErrorCode == undefined) {
                       write2Log("getEventsForActivity Success");
                       ClubFormCtrlAlias.ServiceMsgResponse
                       ClubFormCtrlAlias.Join = response.data;
                       ClubFormCtrlAlias.originalState.FirstName = ClubFormCtrlAlias.Join.FirstName;
                       ClubFormCtrlAlias.originalState.LastName = ClubFormCtrlAlias.Join.LastName;
                       ClubFormCtrlAlias.originalState.GovermentId = ClubFormCtrlAlias.Join.GovermentId;

                       ClubFormCtrlAlias.isDisable = false;

                       //jQuery("<li class='userName'>" + ClubFormCtrlAlias.originalState.FirstName + " " +                        ClubFormCtrlAlias.originalState.FirstName + "</li>").appendTo("#topBar .container ul.top-links");

                       return ClubFormCtrlAlias.originalState.FirstName, ClubFormCtrlAlias.originalState.LastName;
                   }
                   else {
                       ClubFormCtrlAlias.ServiceMsgResponseUpper = response.data.Description;

                   }


               }, function errorCallback(response) {
                   hideLoader();
                   write2Log("getEventsForActivity Error");
                   ClubFormCtrlAlias.ServiceMsgResponseUpper = ClubFormCtrlAlias.ValidationObj.serviceFailure;
                   write2Log(response);
               });
              }
              //   ClubFormCtrlAlias.Join = response.
          }, function errorCallback(response) {
              hideLoader();
              write2Log("GetDetails Error");
              $window.location.href = LoginUrl;
          });
    }, 2000);



    ClubFormCtrlAlias.originalState.FirstName = ClubFormCtrlAlias.Join.FirstName;
    ClubFormCtrlAlias.originalState.LastName = ClubFormCtrlAlias.Join.LastName;
    ClubFormCtrlAlias.originalState.GovermentId = ClubFormCtrlAlias.Join.GovermentId;

    $timeout(function () {
        ClubFormCtrlAlias.submitForm = function () {
            //   if (vcRecaptchaService.getResponse() === "") { //if string is empty 
            if (grecaptcha.getResponse() === "") {
                ClubFormCtrlAlias.ReCaptchNotConfirm = true;
            }
            else {
                ClubFormCtrlAlias.ReCaptchNotConfirm = false;
            }
            if (ClubFormCtrlAlias.JoinClub.$invalid) {
                angular.forEach(ClubFormCtrlAlias.JoinClub.$error, function (field) {
                    angular.forEach(field, function (errorField) {
                        if (errorField != undefined) {
                            errorField.$setDirty();
                        }
                    })
                });
                grecaptcha.reset();
                write2Log(ClubFormCtrlAlias.ServiceMsgResponse)
                ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.fillALllMandatoryField;
            }
            else {
                ClubFormCtrlAlias.ServiceMsgResponse = "";
                ClubFormCtrlAlias.Join.reCaptchaResponse = grecaptcha.getResponse();  //vcRecaptchaService.getResponse();
                showLoader();
                ClubFormCtrlAlias.service.GeneralRequest(ClubFormCtrlAlias.Join, '/WebApi/api/UserDetails/UpdateUserDetails')

                .then(function successCallback(response) {
                    hideLoader();
                    write2Log("UpdateUserDetails");
                    write2Log(response);
                    grecaptcha.reset();
                    if (response.data.ResponseErrorCode == 1) {
                        $window.location.href = LandingPages.UpdateDetails;
                    }
                    else {
                        ClubFormCtrlAlias.ServiceMsgResponse = response.data.Description;
                        //vcRecaptchaService.reload();
                        grecaptcha.reset();
                    }
                }, function errorCallback(response) {
                    //vcRecaptchaService.reload();
                    hideLoader();
                    write2Log("UpdateUserDetails error");
                    write2Log(response);
                    ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;
                    write2Log(ClubFormCtrlAlias.ValidationObj.serviceFailure);
                    grecaptcha.reset();
                });
            }
        }
    }, 2000);
}


//TasmcSendUserNameToHeader = function () {
//    var UserFullName;
//    UserFullName = jQuery(".formContainers #FirstName").val() + " " + jQuery(".formContainers #LastName").val();
//    return UserFullName;
//}



UpdateUserIntrestsCtrlFunc = function (TasmcClubFormService, $timeout, $window) {
    var ClubFormCtrlAlias = this;
    ClubFormCtrlAlias.InitInterests = function (GovermentId) {
        ClubFormCtrlAlias.Interests = {};
        ClubFormCtrlAlias.Interests.WomenHealth = false;
        ClubFormCtrlAlias.Interests.MenHealth = false;
        ClubFormCtrlAlias.Interests.ChildHealth = false;
        ClubFormCtrlAlias.Interests.ElderlyHealth = false;
        ClubFormCtrlAlias.Interests.HighBloodPressure = false;
        ClubFormCtrlAlias.Interests.Cancer = false;
        ClubFormCtrlAlias.Interests.Cardiovascular = false;
        //Interests.General = General;
        ClubFormCtrlAlias.Interests.Diabetes = false;
        ClubFormCtrlAlias.Interests.HyperLipidermia = false;
        ClubFormCtrlAlias.Interests.GovermentId = GovermentId;
    };

    ClubFormCtrlAlias.UpdateInterests = function () {
        ClubFormCtrlAlias.Interests.WomenHealth = jQuery("#WomenHealth").attr("checked") == "checked";
        ClubFormCtrlAlias.Interests.MenHealth = jQuery("#MenHealth").attr("checked") == "checked";
        ClubFormCtrlAlias.Interests.ChildHealth = jQuery("#ChildHealth").attr("checked") == "checked";
        ClubFormCtrlAlias.Interests.ElderlyHealth = jQuery("#ElderlyHealth").attr("checked") == "checked";
        ClubFormCtrlAlias.Interests.HighBloodPressure = jQuery("#HighBloodPressure").attr("checked") == "checked";
        ClubFormCtrlAlias.Interests.Cancer = jQuery("#Cancer").attr("checked") == "checked";
        ClubFormCtrlAlias.Interests.Cardiovascular = jQuery("#Cardiovascular").attr("checked") == "checked";
        //Interests.General = General;
        ClubFormCtrlAlias.Interests.Diabetes = jQuery("#Diabetes").attr("checked") == "checked";
        ClubFormCtrlAlias.Interests.HyperLipidermia = jQuery("#HyperLipidermia").attr("checked") == "checked";
    };

    ClubFormCtrlAlias.service = TasmcClubFormService;
    ClubFormCtrlAlias.ServiceMsgResponse = "";
    ClubFormCtrlAlias.ServiceMsgResponseUpper = "";

    ClubFormCtrlAlias.InvisibleRecaptchaFirstExecute = function () {
        grecaptcha.execute();
    };

    $timeout(function () {
        ClubFormCtrlAlias.submitForm = function () {
            showLoader();
            ClubFormCtrlAlias.UpdateInterests();
            ClubFormCtrlAlias.ServiceMsgResponse = "";
            ClubFormCtrlAlias.service.GeneralRequest(ClubFormCtrlAlias.Interests, '/WebApi/api/UserDetails/UpdateUserInterests')
            .then(function successCallback(response) {
                hideLoader();
                write2Log("UpdateUserInterests");
                write2Log(response);
                grecaptcha.reset();
                if (response.data.ResponseErrorCode == 1) {
                    $window.location.href = LandingPages.UpdateDetails;
                }
                else {
                    ClubFormCtrlAlias.ServiceMsgResponse = GetPRMErrorDescription(PrmTypes.PersonalInfo, response.data.ResponseErrorCode)
                    //vcRecaptchaService.reload();
                }
            }, function errorCallback(response) {
                hideLoader();
                write2Log("UpdateUserInterests error");
                write2Log(response);
            });
        }
    }, 2000);
}

MedTourCallUsMailFunc = function (TasmcClubFormService, $window) {
    var ClubFormCtrlAlias = this;
    ClubFormCtrlAlias.MedTourCallUS = new MedTourCallUS();
    ClubFormCtrlAlias.ValidationObj = new BasicValidation();
    ClubFormCtrlAlias.services = TasmcClubFormService;
    ClubFormCtrlAlias.showForm = false;
    ClubFormCtrlAlias.showCallMeForm = function () {
        console.log('in the function');
        console.log(ClubFormCtrlAlias.showForm);
    }
    ClubFormCtrlAlias.submitForm = function () {
        {
            if (ClubFormCtrlAlias.MedTourCallUsMailForm.$invalid) {
                angular.forEach(ClubFormCtrlAlias.MedTourCallUsMailForm.$error, function (field) {
                    angular.forEach(field, function (errorField) {
                        var el = angular.element(document.querySelector("#" + errorField.$name));
                        el.attr("aria-invalid", "true");
                        el.addClass("ng-touched");
                        if (errorField != undefined) {
                            errorField.$setDirty();
                        }
                    })
                }); ClubFormCtrlAlias
                angular.element('[name="ClubFormCtrlAlias.MedTourCallUsMailForm"]').find('.ng-invalid:visible:first').focus();
                jQuery(".GeneralErrorMsg").css("display", "block");
            }
            else {
                jQuery.each(ClubFormCtrlAlias.MedTourCallUS, function (title) {
                    jQuery("#" + title).attr("aria-invalid", "false");
                });
                jQuery(".GeneralErrorMsg").css("display", "none");
                showLoader();
                //For unit/surgery page, the recipient email is the emali field, displayed in the unit details control.
                ClubFormCtrlAlias.MedTourCallUS.unitContactEmail = jQuery("#MedTourCallUsMailForm").attr("data-mail");
                ClubFormCtrlAlias.MedTourCallUS.PageURL = window.location.href;
                ClubFormCtrlAlias.MedTourCallUS.WebUrl = _spPageContextInfo.webServerRelativeUrl;
                var callUSdata = ClubFormCtrlAlias.MedTourCallUS;

                $.ajax({
                    url: spSiteServerUrl + "/IchilovHandler.ashx?Command=SendLead",
                    dataType: "json",
                    data: callUSdata,
                    type: "POST",
                    headers: { "Accept": "application/json;odata=verbose" },

                    success: function (response) {
                        response = response.toString();
                        switch (response) {
                            case "0"://sucess
                                if (isSessionStorageAvailable() == true) {
                                    sessionStorage.removeItem("UtmURL");
                                }
                                if (ISO3 == 'eng') {

                                    window.location.href = "/thankyouen.aspx";
                                }
                                else {

                                    window.location.href = "/thankyou.aspx";
                                }

                                break;
                            case "1"://error - requiered field failure;
                                emtyFieldValidation = "one field or more are empty";
                                break;
                            case "2"://error cause by Server Validation
                                emtyFieldValidation = "Error Has Occured Try Again Later";
                                break;
                            case "3"://Error cause by server (ex)
                                location.path('/No Location Path!');
                                break;
                        }
                    },
                    error: function (response) {

                        console.log(response.responseText);
                    }

                });
                //ClubFormCtrlAlias.services.GeneralRequest(ClubFormCtrlAlias.MedTourCallUS, "/WebApi/api/forms/MedTourCallUsByMail")
                //    .then(function successCallback(response) {
                //        write2Log("SendContactUsMail Success");
                //        write2Log(response);
                //        $window.location.href = LandingPages.ContactUsMail;

                //    }, function errorCallback(response) {
                //        hideLoader();
                //        write2Log("ContactUsMailFunc Error");
                //        write2Log(response);

                //        ClubFormCtrlAlias.ServiceMsgResponse = ClubFormCtrlAlias.ValidationObj.serviceFailure;

                //    });
            }
        }

    }
}



ExpertCorrespondenceCtrlFunc = function (ExpertCorrespondenceService, vcRecaptchaService, $timeout, $window) {

    var ExpertCorrespondenceCtrl = this;
    ExpertCorrespondenceCtrl.publicKey = publicKey;
    ExpertCorrespondenceCtrl.Title = "שאל את המומחה";
    ExpertCorrespondenceCtrl.ExpertCorrespondenceData = new ExpertCorrespondence();
    /*if (typeof expertCorrespondeceInit !== 'undefined') {
        ExpertCorrespondenceCtrl.ExpertCorrespondenceData = new ExpertCorrespondence(expertCorrespondeceInit.UserName, expertCorrespondeceInit.ExpertName, expertCorrespondeceInit.ExpertId, expertCorrespondeceInit.Email);
    }*/
    ExpertCorrespondenceCtrl.ValidationObj = new BasicValidation();
    ExpertCorrespondenceCtrl.service = ExpertCorrespondenceService;
    ExpertCorrespondenceCtrl.ExpertCorrespondenceData.RecaptchaResponse = "captcha";

    //ExpertCorrespondenceCtrl.InvisibleRecaptchaFirstExecute = function () {
    //    grecaptcha.execute();
    //};


    ExpertCorrespondenceCtrl.submitForm = function () {
        ExpertCorrespondenceCtrl.ServiceMsgResponse = "";

        ExpertCorrespondenceCtrl.ExpertCorrespondenceData.RecaptchaResponse = grecaptcha.getResponse(); //vcRecaptchaService.getResponse();

        if (ExpertCorrespondenceCtrl.ExpertCorrespondence.$invalid || ExpertCorrespondenceCtrl.ExpertCorrespondenceData.RecaptchaResponse === "") {
            angular.forEach(ExpertCorrespondenceCtrl.ExpertCorrespondence.$error, function (field) {
                angular.forEach(field, function (errorField) {
                    if (errorField != undefined) {
                        errorField.$setDirty();
                    }
                })

            });
            grecaptcha.reset();
            angular.element('[name="ExpertCorrespondenceCtrl.ExpertCorrespondence"]').find('.ng-invalid:visible:first').focus();
            ExpertCorrespondenceCtrl.ServiceMsgResponse = ExpertCorrespondenceCtrl.ValidationObj.fillALllMandatoryField;
        }
        else {
            showLoader();
            $timeout(function () {
                ExpertCorrespondenceCtrl.ExpertCorrespondenceData.AlreadySent = jQuery("#ReturningContact").attr("checked") == "checked";
                ExpertCorrespondenceCtrl.ExpertCorrespondenceData.ExpertId = angular.element('[name="ExpertCorrespondenceCtrl.ExpertCorrespondence"]').attr("data-expertid");

                ExpertCorrespondenceCtrl.service.SendCorrespondence(ExpertCorrespondenceCtrl.ExpertCorrespondenceData)
                .then(function successCallback(response) {
                    write2Log("SendCorrespondenceSuccess");
                    write2Log(response);
                    grecaptcha.reset();
                    ExpertCorrespondenceCtrl.ServiceMsgResponse = response.data.Description;
                    $window.location.href = LandingPages.ExpertQuestion;
                    hideLoader();
                }, function errorCallback(response) {
                    hideLoader();
                    write2Log("SendCorrespondence error");
                    write2Log(response);
                    ExpertCorrespondenceCtrl.ServiceMsgResponse = ExpertCorrespondenceCtrl.ValidationObj.serviceFailure;
                    write2Log(ExpertCorrespondenceCtrl.ValidationObj.serviceFailure);
                    //vcRecaptchaService.reload();
                    // grecaptcha.execute();
                });
            }, 3000);
        }

    };
    $timeout(function () {
        ExpertCorrespondenceCtrl.submitFormAnswer = function () {
            ExpertCorrespondenceCtrl.ServiceMsgResponse = "";
            ExpertCorrespondenceCtrl.ExpertCorrespondenceData.RequestId = angular.element('[name="ExpertCorrespondenceCtrl.ExpertCorrespondenceAnswer"]').attr("data-requestid");

            if (ExpertCorrespondenceCtrl.ExpertCorrespondenceAnswer.$invalid) {
                angular.forEach(ExpertCorrespondenceCtrl.ExpertCorrespondenceAnswer.$error, function (field) {
                    angular.forEach(field, function (errorField) {
                        if (errorField != undefined) {
                            errorField.$setDirty();
                        }
                    })
                });
                angular.element('[name="ExpertCorrespondenceCtrl.ExpertCorrespondenceAnswer"]').find('.ng-invalid:visible:first').focus();
            }
            else {
                showLoader();
                ExpertCorrespondenceCtrl.service.SendCorrespondenceAnswer(ExpertCorrespondenceCtrl.ExpertCorrespondenceData).then(function successCallback(response) {
                    hideLoader();
                    $window.location.href = LandingPages.ExpertAnswer;;
                }, function errorCallback(response) {
                    hideLoader();
                    switch (response.data) {
                        case "replay_not_found_in_db":
                            {
                                ExpertCorrespondenceCtrl.ServiceMsgResponse = "לא נמצאה בקשה מתאימה";
                                break;
                            }
                        case "mail_not_sent":
                            {
                                ExpertCorrespondenceCtrl.ServiceMsgResponse = "המייל לא נשלח, אנא נסו שנית";
                                break;
                            }
                        case "db_not_updated":
                            {
                                ExpertCorrespondenceCtrl.ServiceMsgResponse = "לא ניתן לעדכן את התשובה במסד הנתונים, אם הבעיה חוזרת יש לפנות למנהל המערכת";
                                break;
                            }
                        case "unkown_error":
                            {
                                ExpertCorrespondenceCtrl.ServiceMsgResponse = "אירעה שגיאה כללית,אם הבעיה חוזרת יש לפנות למנהל המערכת";
                                break;
                            }
                        default:
                            {
                                ExpertCorrespondenceCtrl.ServiceMsgResponse = "אירעה שגיאה כללית,אם הבעיה חוזרת יש לפנות למנהל המערכת";
                            }
                    }
                });
            }
        }
    }, 200);
}

ShowUserDetailsFunc = function ($scope, $sce) {

    var addressWithoutPostal = localStorage.Address.replace(localStorage.Postal, '');
    var addressWithoutCity = addressWithoutPostal.replace(localStorage.City, "");
    var cleanExtId = localStorage.ExtPatientId.replace('-', '');
    $scope.FirstName = $sce.trustAsHtml(localStorage.FirstName);
    $scope.LastName = $sce.trustAsHtml(localStorage.LastName);
    $scope.ExtPatientId = $sce.trustAsHtml(cleanExtId);
    $scope.Phone1 = $sce.trustAsHtml(localStorage.Phone1);
    $scope.Phone2 = $sce.trustAsHtml(localStorage.Phone2);
    $scope.City = $sce.trustAsHtml(localStorage.City);
    $scope.Address = $sce.trustAsHtml(addressWithoutCity.trimStart());
    $scope.PostalCode = $sce.trustAsHtml(localStorage.Postal);

}


angular.module("TasmcFormsApp", ['ngTouch', 'ui.bootstrap', 'vcRecaptcha'])
.service('TasmcClubFormService', ['$q', '$http', TasmcClubFormServiceFunc])
.service('TasmcClubsEventService', ['$http', TasmcClubsEventServiceFunc])
.service('TasmcExpertCorrespondenceService', ['$http', TasmcExpertCorrespondenceServiceFunc])
.factory('TasmcFactory', ['$q', '$http', TasmcFactoryFunc])
.directive('ngEnter', [ngEnterFunc])
.directive('govermentId', [validateIdFunc])
.directive('phoneVerify', [phoneVerifyFunc])
.directive("select2", ['$timeout', '$parse', select2Func])
.directive('checkRequired', [checkBoxReqFunc])

.controller('ShowUserDetailsCtrl', ['$scope', '$sce', ShowUserDetailsFunc])

.controller('BaseJoinClubCtrl', ['ClubFormCtrlAlias', 'TasmcClubFormService', 'vcRecaptchaService', '$timeout', '$window', BaseJoinClubCtrlFunc])
.controller('JoinBeWellClubCtrl', ['$controller', JoinBeWellCtrlFunc])
.controller('JoinMommyLissClubCtrl', ['$controller', JoinMommyLissClubCtrlFunc])
.controller('ClubEventCtrl', ['TasmcClubFormService', 'TasmcClubsEventService', 'vcRecaptchaService', '$timeout', '$window', ClubEventCtrlFunc])
//.controller('ClubEventPageCtrl', ['$window', ClubEventPageCtrlFunc])
.controller('ContactUsFormCtrl', ['TasmcClubFormService', 'vcRecaptchaService', '$timeout', '$window', ContactUsFormCtrlFunc])
.controller('ContactDoctorFormCtrl', ['TasmcClubFormService', 'TasmcFactory', 'vcRecaptchaService', '$timeout', '$window', ContactDoctorFormCtrlFunc])
.controller('TasmcLogAndSingIn', ['TasmcClubFormService', '$timeout', '$window', 'vcRecaptchaService', TasmcLogAndSingInFunc])
//.controller('UpdateUserDetailCtrl', ['TasmcClubFormService', 'vcRecaptchaService', "$timeout", '$window', TasmcUpdateDetailsFunc])

    //.controller('ShowUserDetailsCtrl', ['$controller', ShowUserDetailsFunc])
.controller('UpdateUserIntrestsCtrl', ['TasmcClubFormService', '$timeout', '$window', UpdateUserIntrestsCtrlFunc])
.controller('ExpertCorrespondenceCtrl', ['TasmcExpertCorrespondenceService', 'vcRecaptchaService', '$timeout', '$window', ExpertCorrespondenceCtrlFunc])
.controller('ContactUsMail', ['TasmcClubFormService', '$window', ContactUsMailFunc])
.controller('MedTourCallUsMail', ['TasmcClubFormService', '$window', MedTourCallUsMailFunc])

var missingFieldsValid = true;
function validateMissingFields() {
    missingFieldsValid = true;
    $("input[id^='obligation_number']").each(function (i, o) {
        var v = $(o).val();
        $(o).removeClass("invalidobligation");
        if (typeof (v) == "undefined" || v == null || v == "") {
            $(o).addClass("invalidobligation");
            requiredFieldValidationSubmit(this);
            missingFieldsValid = false;
        }
        else if (isNaN(v)) {
            $(o).addClass("invalidobligation");
            if ($(this).siblings("#format-error").hasClass("hidden")) {
                $(this).siblings("#format-error").toggleClass("hidden");
            }
            if ($(o).siblings("#obligation-error").hasClass("hidden") == false) {
                $(o).siblings("#obligation-error").toggleClass("hidden");
            }
        }

        else {
            if ($(o).siblings("#obligation-error").hasClass("hidden") == false) {
                $(o).siblings("#obligation-error").toggleClass("hidden");
            }
            if ($(o).siblings("#format-error").hasClass("hidden") == false) {
                $(o).siblings("#format-error").toggleClass("hidden");
            }
        }


    });


    $("input[id^='datetimepicker']").each(function (i, o) {
        var v = $(o).val();
        $(o).removeClass("invalidobligation");
        var validationMsgElement = $(o)[0].parentElement.parentElement.lastElementChild.firstElementChild;
        if (validationMsgElement == undefined) {
            return;
        }
        if (typeof (v) == "undefined" || v == null || v == "") {
            $(o).addClass("invalidobligation");
            if ($(this).val() == "") {
                if ($(validationMsgElement).hasClass("hidden")) {
                    $(validationMsgElement).toggleClass("hidden");
                }
                $(".base-form input#datetimepicker1").focus();
            }
            else {
                if ($(validationMsgElement).hasClass("hidden") == false) {
                    $(validationMsgElement).toggleClass("hidden");
                }
            }

            missingFieldsValid = false;
        }
        else {
            if ($(validationMsgElement).hasClass("hidden") == false) {
                $(validationMsgElement).toggleClass("hidden");
            }
        }

    });

    $("input[id^='obligation_code']").each(function (i, o) {
        var v = $(o).val();
        $(o).removeClass("invalidobligation");
        if (typeof (v) == "undefined" || v == null || v == "") {
            $(o).addClass("invalidobligation");
            requiredFieldValidationSubmit(this);
            missingFieldsValid = false;
        }
        else {
            if ($(o).siblings("#obligation-error").hasClass("hidden") == false) {
                $(o).siblings("#obligation-error").toggleClass("hidden");
            }
        }
    });

    var insuranceSelect = $("#insurance");
    insuranceSelect.removeClass("invalidobligation");
    var i = insuranceSelect.val();
    if (i == '') {
        insuranceSelect.addClass("invalidobligation");
        requiredFieldValidationSubmit(insuranceSelect);
        missingFieldsValid = false;
    }
    else {
        // if error message is shown because of previous trys, we need to hide the message, because not the field is valid
        if (insuranceSelect.siblings("#obligation-error").hasClass("hidden") == false) {
            insuranceSelect.siblings("#obligation-error").toggleClass("hidden");
        }
    }

    var districtClalitSelect = $("#district");
    districtClalitSelect.removeClass("invalidobligation");
    var i = districtClalitSelect.val();

    // if districts is shown (for clalit patients) and field is empty, we need to validate
    if (districtClalitSelect.hasClass("hidden") == false && i == '') {
        districtClalitSelect.addClass("invalidobligation");
        requiredFieldValidationSubmit(districtClalitSelect);
        missingFieldsValid = false;
    }
    else {
        if (districtClalitSelect.siblings("#obligation-error").hasClass("hidden") == false) {
            districtClalitSelect.siblings("#obligation-error").toggleClass("hidden");
        }
    }
    return missingFieldsValid;
}

function requiredFieldValidationSubmit(index) {
    if ($(index).val() == "") {
        if ($(index).siblings("#obligation-error").hasClass("hidden")) {
            $(index).siblings("#obligation-error").toggleClass("hidden");
        }

        $(".base-form input#obligation_number").focus();
    }
    else {
        $(index).siblings("#obligation-error").hide();
    }

}
function validateObligationCodes() {
    var codes = updateObligationCodesSelect();
    totalSelectedOC = codes.length;
    obligationArrayValid = true;
    var arr = new Array();
    $("input[id^='obligation_code']").each(function (i, o) {
        $(o).removeClass("invalidobligation");

        var v = $(o).val().toUpperCase();
        var indexToRemove = $.inArray(v, codes);
        if (indexToRemove != -1) {
            codes.splice(indexToRemove, 1);
        }


        if ($.inArray(v, arr) != -1) {
            obligationArrayValid = false;
            $(o).addClass("invalidobligation");

        }
        if (v == "") {
            obligationArrayValid = false;
            $(o).addClass("invalidobligation");
        }
        arr.push(v);
    });

    if (!obligationArrayValid) {
        $("#cdialog").remove();
        $(".usermessage").after("<div id='cdialog'><div>" + UIResource.personalAreaCheckin_error_IllegalFieldData + "</div></div>");
        $("#cdialog").dialog({
            bgiframe: true,
            autoOpen: true,
            modal: true,
            title: "בעיה בהזנה",
            buttons:
            {
                'חזרה לטופס': function () {
                    $(this).dialog('close');
                    return false;
                }
            }
        });
    }
    totalSelectedOC -= codes.length;
    return obligationArrayValid;
}

function validateCommitmentNumByPattern() {
    commitmentNumValid = true;
    if (data.Insurer != "") {
        var obligationNumPatern = obligationNumberPatternsJson.filter(function (el) {
            return (el.InsurerCode == data.Insurer);
        });
        $('*[id*=obligation_number]').each(function (i, o) {
            if (isNaN(data.Commitments[i].CommitmentNumber) || data.Commitments[i].CommitmentNumber < obligationNumPatern[0].FromNumberOfHealthInsurance || data.Commitments[i].CommitmentNumber > obligationNumPatern[0].ToNumberOfHealthInsurance) {
                $(o).addClass("invalidobligation");
                if ($(this).siblings("#format-error").hasClass("hidden")) {
                    $(this).siblings("#format-error").toggleClass("hidden");
                }
                commitmentNumValid = false;
            }
            else {
                if ($(o).siblings("#obligation-error").hasClass("hidden") == false) {
                    $(o).siblings("#obligation-error").toggleClass("hidden");
                }
                if ($(o).siblings("#format-error").hasClass("hidden") == false) {
                    $(o).siblings("#format-error").toggleClass("hidden");
                }
            }
        });
    }
    return commitmentNumValid;

}

function checkEqual(age) {
    return age >= document.getElementById("ageToCheck").value;
}

function checkinMessage(message, redirecturl) {
    $(".checkin-form").css("display", "none");
    $(".usermessage").append('<div class="checkinerror" style="color:#e00085">' + message + '</div>');
    $(".usermessage").append('<a href="' + redirecturl + '" alt="' + message + '">חזרה לרשימת תורים עתידיים</a>');
    /*	setTimeout(function(){	
            location.href = redirecturl;	
        }, 3000);*/
}

function getCheckinServices() {
    var arr = new Array();
    $(apptData.preappt.Services).each(function (i, o) {
        if ($.inArray(o.TALST, arr) == -1) {
            arr.push(o.TALST.toUpperCase());
        }
    });
    return arr;
}

function getCheckinDocServices() {
    var arr = new Array();
    $(apptData.preappt.DocServices).each(function (i, o) {
        if ($.inArray(o.TALST, arr) == -1) {
            arr.push(o.TALST.toUpperCase());
        }
    });
    return arr;
}


function updateObligationCodesSelect(selectId) {
    var arr = new Array();
    if (apptData != undefined) {
        $(apptData.preappt.DocServices).each(function (i, o) {
            if ($.inArray(o.TALST, arr) == -1) {
                arr.push(o.TALST.toUpperCase());
            }
        });
        $(apptData.preappt.Services).each(function (i, o) {
            if ($.inArray(o.TALST, arr) == -1) {
                arr.push(o.TALST.toUpperCase());
            }
        });
        //totalDocOC = arr.length;
        totalDocOC = apptData.preappt.Services.length;
    }
    return arr;
}

var apptData;
var currentId = 1;
var totalSelectedOC = 0;
var totalDocOC = 0;
var CheckinApp = angular.module('CheckinApp', []);
var vDate = new Date();
var checkinRetries = 0;
CheckinApp.controller('CheckInFormController', ['$scope', '$compile', function ($scope, $compile) {


    var max_field = 6;
    var big_wrapper = $(".big-wrapper");
    var add_obligation = $(".add-service-code button");
    var couner = 1;
    var form_counter = 2
    var personalArea_obligation_number = UIResource.personalArea_obligation_number;
    var personalArea_datepicker1 = UIResource.personalArea_datepicker1;
    var personalArea_obligation_code = UIResource.personalArea_obligation_code;
    var personalArea_AddObligation_code = UIResource.personalArea_AddObligation_code;
    var personalArea_tooltip_Insurance = UIResource.personalArea_tooltip_Insurance;
    var personalArea_tooltip_district = UIResource.personalArea_tooltip_district;
    var personalArea_tooltip_obligation_number = UIResource.personalArea_tooltip_obligation_number;
    var personalArea_tooltip_datepicker = UIResource.personalArea_tooltip_datepicker;
    var personalArea_tooltip_obligation_code = UIResource.personalArea_tooltip_obligation_code;
    var personalArea_tooltip_obligation_detail = UIResource.personalArea_tooltip_obligation_detail;
    var personalArea_tooltip_obligation_delete = UIResource.personalArea_tooltip_obligation_delete;
    var personalArea_error_code = UIResource.personalArea_error_code;
    var personalArea_error_obligation = UIResource.personalArea_error_obligation;
    var personalAreaCheckin_error_IllegalObligationNumber = UIResource.personalAreaCheckin_error_IllegalObligationNumber;
    var firstName = localStorage.FirstName;
    var FormData;

    var zid = getParameterByName('zid');
    var fileUrl =
           "/WebApi/api/CheckIn/GetAppointmentDetails?zID=" + zid;

    $.ajax({
        type: 'GET',
        url: fileUrl,
        dataType: "json",
        headers: { 'Content-Type': 'application/json' },

        success: function (response) {
            var res = JSON.parse(response);
            apptData = res;

            if (!res.preappt.OK) {
                checkinMessage(UIResource.personalArea_error_Technical, '/Be-Well/Pages/appointments.aspx');
                return;
            }
            else if (typeof (res.appt.CHEKIN) == "undefined" || res.appt.CHEKIN == null) {
                checkinMessage(techerr, '/Be-Well/Pages/appointments.aspx');
                return;
            }
            else if (res.appt.CHEKIN == 0) {
                checkinMessage(UIResource.personalArea_error_CHECKIN0, '/Be-Well/Pages/appointments.aspx');
                return;
            }
            else if (res.appt.CHEKIN == 2) {
                checkinMessage(UIResource.personalArea_error_CHECKIN2, '/Be-Well/Pages/appointments.aspx');
                return;
            }


            var ud = res.preappt.UnitDesc;
            vDate = new Date(res.preappt.VisitDate);
            var tDate = vDate.getDate() + "/" + parseInt(vDate.getMonth() + 1) + "/" + vDate.getFullYear();
            var time = res.preappt.VisitTime.split(':');
            var tTime = time[0] + ':' + time[1];
            $("#unitDescriptionCheckin").text(ud);
            $("#visitTimeCheckin").text(tTime);
            $("#visitDateCheckin").text(tDate);
            $(".patient-details-wrapper").css("visibility", "visible");
            $("#obligation_code1_0").empty();
            $("#datetimepicker1").datepicker({
                format: 'dd/mm/yyyy',
                //container: container,
                todayHighlight: true,
                autoclose: true,
                rtl: true,
                language: 'he',
                locale: 'he',
                startDate: vDate
            });
        },
        error: function (response) {
        }
    });


    $("#userNameCheckin").text(firstName);

    $(".add-service-code2 button").click(function (e) {
        currentId++;
        e.preventDefault();
        angular.element(document.getElementById("big-wrapper")).append($compile('<div class="third-section new-section col-lg-12 col-md-12 col-sm-12 col-xs-12">' +
                '<div class="col-lg-12 col-md-12"><h3>' + personalArea_tooltip_obligation_detail+'</h3><button class="delete_field">( <span class="glyphicon glyphicon-trash"></span>' + personalArea_tooltip_obligation_delete + ')</button></div>' +
                '<div class="form-group col-lg-6 col-md-6 col-sm-12 col-xs-12"><div class="tooltip-cover"><img src="/Style         Library/Tasmc/Images/help-tooltip.png" alt="" title="" />' +
        '<span class="tooltipcontent">' + personalArea_tooltip_obligation_number + '</span></div><label class="control-label"         for="obligation_number"><span class="must-fill">*</span>' + personalArea_obligation_number + '</label>' +
            '<div class="col-sm-12 col-xs-12 inputGroupContainer input-group">' +
            '<input currentId="' + currentId + '"  id="obligation_number' + currentId + '" ng-model="data.obligation_number' + currentId + '" name="obligation_number" type="text" maxlength="9" class="form-control input-md         code-obligation" maxlength="15" onkeypress="obligationCodeVal(this)">' +
        '<span id="obligation-error" class="hidden" style="color:red;">' + personalArea_error_obligation + '</span><span id="format-error" class="hidden" style="color:red;">' + personalAreaCheckin_error_IllegalObligationNumber + '</span></div></div>' +
        '<div class="form-group col-lg-6 col-md-6 col-sm-12 col-xs-12 obligation_exp">' +
        '<div class="tooltip-cover"><img src="/Style Library/Tasmc/Images/help-tooltip.png" alt="" title="" /><span class="tooltipcontent">' + personalArea_tooltip_datepicker + '</span></div>' +
        '<label class="control-label" for="datepicker"><span class="must-fill">*</span>' + personalArea_datepicker1 + '</label><div class="col-md-12 input-group date"         id="containerdatetimepicker' + currentId + '">' +
        '<input class="form-control" ng-model="data.date' + currentId + '" id="datetimepicker' + currentId + '" name="datetimepicker' + currentId + '" type="text" /><span class="input-group-addon primary"         onclick="datePicker(this)">' +
        '<img class="glyphicon glyphicon-calendar" src="/Style Library/Tasmc/Images/calendar-icon.png" alt="" title="" /></span></div>  <div class="col-md-12 col-xs-12 row"><span id="date-obligation-error' + currentId + '"class="hidden" style="color:red;">' + personalArea_error_obligation +
        '</span></div></div>' +
        '<div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">' +
        '<div class="tooltip-cover"><img src="/Style Library/Tasmc/Images/help-tooltip.png" alt="" title="" /><span class="tooltipcontent">' + personalArea_tooltip_obligation_code + '</span></div>' +
        '<label class="control-label" for="obligation_code' + currentId + '"><span class="must-fill">*</span>' + personalArea_obligation_code + '</label>' +
        '<div class="col-md-12 col-sm-12 col-xs-12 input_fields_wrap inputGroupContainer">' +
        '<input id="obligation_code' + currentId + '_0" ng-model="data.obligation_code' + currentId + '" name="obligation_code" type="text" class="form-control input-md col-lg-6 col-md-9 code-obligation" maxlength="15" onkeypress="obligationCodeVal(this)" />' +
        '<button type="button" name="addObligation" class="obligation_code btn btn-default col-lg-2 col-md-4 add_field_button" id="addObligation' + currentId + '" commitmentIndex="' + currentId + '"       onclick="addButton(this)">' + personalArea_AddObligation_code + '</button>' +
        '<span id="obligation-error" class="hidden" style="color:red;">' + personalArea_error_obligation + '</span></div></div></div>')($scope));
        $("#obligation_code" + currentId + "_0").empty();



        $("#datetimepicker" + currentId).datepicker({
            format: 'dd/mm/yyyy',
            //container: container,
            todayHighlight: true,
            autoclose: true,
            rtl: true,
            language: 'he',
            locale: 'he',
            startDate: vDate
        });
    });



    $scope.getInsurer = function () {

        var retVal = '';
        var search = $("#district").val();
        if (search != null) {
            $(insurerCodesJson.Items).each(function (i, o) {
                if (o.DisplayedDistrictAreaName == search) {
                    retVal = o.DistrictAreaCode;
                }
            });
        }
        else {
            search = $("#insurance").val();
            $(insurerCodesJson.Items).each(function (i, o) {
                if (o.InsurerName == search) {
                    retVal = o.DistrictAreaCode;
                }
            });
        }
        return retVal;

    };


    $scope.getCommitmentsArray = function () {
        var codes = updateObligationCodesSelect();
        totalSelectedOC = 0;
        var commitments = new Array();
        $("input[id^='obligation_number']").each(function (i, o) {
            var currentId = $(o).attr("currentId");
            var commitment = {};
            commitment.CommitmentNumber = $(o).val();
            commitment.CommitmentNumber = parseInt(commitment.CommitmentNumber);
            commitment.CommitmentExpiration = $("#datetimepicker" + currentId).val();
            commitment.ServiceIds = new Array();
            $("input[id^='obligation_code" + currentId + "']").each(function (i1, o1) {
                var v = $(o1).val();
                commitment.ServiceIds.push(v);
                if ($.inArray(v, codes) != -1) {
                    totalSelectedOC++;
                }

            });
            commitments.push(commitment);
        });
        return commitments;
    },

	$scope.collectData = function () {
	    var data = {};
	    data.Insurer = $scope.getInsurer();
	    data.Commitments = $scope.getCommitmentsArray();
	    return data;
	},

 $scope.submit = function () {

     checkinRetries++;


     data = $scope.collectData();

     validateMissingFields();
     validateCommitmentNumByPattern();

     if (!commitmentNumValid || !missingFieldsValid) {
         return;
     }

     validateObligationCodes();
     if (!obligationArrayValid) {
         return;
     }


     if (totalSelectedOC < totalDocOC) {
         var retriesAllowed = UIResource.personalArea_Checkin_Retries;
         var messageText = checkinRetries >= retriesAllowed ? UIResource.personalArea_Checkin_RetriesExceeded : UIResource.personalArea_Checkin_LowInstances;
         var titleText = checkinRetries >= retriesAllowed ? UIResource.personalArea_Checkin_PleaseNoteMsg : UIResource.personalArea_Checkin_LowInstancesDialogTitle;
         $(".usermessage").after("<div id='cdialog'><div>" + messageText + "</div></div>");
         $("#cdialog").dialog({
             bgiframe: true,
             autoOpen: true,
             modal: true,
             title: titleText,
             buttons:
             {
                 'חזרה לטופס': function () {
                     if (checkinRetries >= retriesAllowed) {
                         location.href = UIResource.personalArea_Checkin_RedirectToAppointments;
                     }
                     else {
                         $(this).dialog('close');
                     }

                     return;
                 }
             }
         });
         return;
     }

     if (!validateFiles()) {
         $('#ifileupload')[0].contentWindow.displayMissingFilesValidationUserMessage();
         $('#ifileupload')[0].contentWindow.submitFiles();
         return;
     }


     console.log("Send a request to the server: " + JSON.stringify(data));
     var zid = getParameterByName('zid');
     $('.tasmc-loader').show();
     $.ajax({
         type: 'POST',
         url: "/webapi/api/CheckIn/CheckInFromSubmit?zid=" + zid, //" + 'ID=' + IdVal + '&DOB=' + dtVal + "",
         data: JSON.stringify(data),
         dataType: "json",
         headers: { 'Content-Type': 'application/json' },

         success: function (response) {
             // grecaptcha.reset();
             $('.tasmc-loader').hide();
             if (response.IsSuccess == false) {
                 var err = UIResource.personalArea_Checkin_Error;
                 if (response.Errors[0].indexOf('Retries count is') != -1) {
                     err = UIResource.personalArea_Checkin_RetriesExceeded;
                 }

                 $(response.Errors).each(function (i, o) {
                     if (o == "insurer number pattern not found") {
                         err = UIResource.personalAreaCheckin_error_IllegalObligationNumber;
                     }
                 });

                 $(".errormessage").text(err).css("display", "block");
             }
             else if (response.IsSuccess) {
                 $("#cdialog").remove();
                 window.location.href = UIResource.personalArea_Checkin_CaseCreatedDialogRedirect;
             }
         },
         error: function (response) {
             // grecaptcha.reset();
             $('.tasmc-loader').hide();
             var errMsg = $("[data-internalerror]").text();
             alert(errMsg);
             $(".ServiceMsgResponse.Error").text(errMsg);
             $(".ServiceMsgResponse.Error").css("display", "block");
             $(".ServiceMsgResponse.Success").css("display", "none");
             hideLoader();
         }
     });


 };
}]);



var AppointmentsApp = angular.module('AppointmentsApp', []);
AppointmentsApp.controller('FutureAppointments', ['$scope', '$compile', '$http', function ($scope, $compile, $http) {
    showLoader();
    $http.get("/WebApi/api/PrivateArea/GetPatientApointments")
        .then(function successCallback(response) {
            if (response == "-1") {
                console.log("GetPatientApointments Error getting data!")
            }
            else {

                // var NewDat = Date($scope.Items[0].TMNDT);


                try {
                    $scope.resultsCount = 0;
                    var JsonRes = jQuery.parseJSON(response.data);
                    $scope.resultsCount = JsonRes.length;
                    $scope.Items = ChangeDateAndTimeFormat(JsonRes, "TMNZT", "TMNDT"); //*currently: changes *time to HH:MM and *date to dd-mm-yyyy
                    //*property names (TMNZT) *has* to be identical to the prop names returnd from api* 
                } catch (e) {

                }



            }
            hideLoader();
            try { ClinicTestsAppDoneRender(); } catch (err) { }
        }, function errorCallback(response) {
            hideLoader();
            console.log("Enternal server error : 500. Session End or Token Invalid");
            if ($("#suiteBar").length != 1) // check if you are not in Admin Mode with Rebon shown in the page
            {
                window.location.href = loginRedirectAfterLogout;
            }

        });


    $scope.redirecttocheckin = function () {
        var zimunNumber = this.item.VKGID;
        location.href = '/Be-Well/Pages/checkin.aspx?zid=' + zimunNumber;
    }

    ///GetPatientAppoinmentPDF 2
    $scope.getZimunPDF = function () {
        var zuminNumber = this.item.VKGID;

        showLoader();
        var fileUrl =
         "/WebApi/api/PrivateArea/GetPatientAppoinmentPDF?" + 'zuminPDFnumber=' + zuminNumber;

        $http.get(fileUrl, { responseType: 'arraybuffer' })
              .success(function (response) {

                  // It is necessary to create a new blob object with mime-type explicitly set
                  // otherwise only Chrome works like it should
                  var newBlob = new Blob([response], { type: "application/pdf" })

                  // IE doesn't allow using a blob object directly as link href
                  // instead it is necessary to use msSaveOrOpenBlob
                  if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                      window.navigator.msSaveOrOpenBlob(newBlob);
                      return;
                  }

                  // For other browsers: 
                  // Create a link pointing to the ObjectURL containing the blob.
                  const data = window.URL.createObjectURL(newBlob);
                  var link = document.createElement('a');
                  link.href = data;
                  link.download = "Appoinment.pdf";
                  //margalit: comment out, because this doesn't work in firefox
                  //link.click();
                  link.dispatchEvent(new MouseEvent('click', { bubbles: true, view: window }));
              });
        hideLoader();
    }

    $scope.checkinHide = function () {
        if (this.item.CHEKIN != "") {
            return true;
        }
        else {
            return false;
        }
    }
    $scope.PaymentStatusHideShow = function () {
        if (this.item.PAYSTATUS != "") {
            return true;
        }
        else {
            return false;
        }
    }


}]);

var LaboratoryTestResultsApp = angular.module('LaboratoryTestResultsApp', []);
LaboratoryTestResultsApp.controller('LaboratoryTestResults', ['$scope', '$compile', '$http', function ($scope, $compile, $http) {
    showLoader();
    $http.get("/WebApi/api/PrivateArea/GetLaboratoryTestResults")
        .then(function successCallback(response) {
            if (response == "-1") {
                console.log("GetLaboratoryTestResults Error getting data!")
            }
            else {
                showLoader();
                //  console.log(jQuery.parseJSON(response.data));
                //$scope.Items = jQuery.parseJSON(response.data);
                var JsonRes = jQuery.parseJSON(response.data);
                try {
                    var laboratoryTestResults = UIResource.PatientLaboratoryTestResults_DTIDs.split(',');
                    var count = JsonRes.length - 1;
                    for (i = count ; i >= 0 ; i--) {
                        var DTID = JsonRes[i].DTID;
                        if (jQuery.inArray(DTID, laboratoryTestResults) == -1) {
                            JsonRes.splice(i, 1);
                        }
                    }


                }
                catch (err) {

                    console.log(err);
                    hideLoader();
                }
                $scope.resultsCount = JsonRes.length;
                $scope.Items = ChangeDateAndTimeFormat(JsonRes, "", "DODAT");/* *currently: changes *time to HH:MM and *date to dd-mm-yyyy
                       .slice(13,25)                                                         *property names (DOTIM) *has* to be identical to the prop names returnd from api* 
                                                                             */

            }
            hideLoader();
            try { ClinicTestsAppDoneRender(); } catch (err) { }
        }, function errorCallback(response) {
            hideLoader();
            console.log("Enternal server error : 500. Session End or Token Invalid");
            if ($("#suiteBar").length != 1) // check if you are not in Admin Mode with Rebon shown in the page
            {
                window.location.href = loginRedirectAfterLogout;
            }
        });

    ///GetLaboratoryTestResultsPDF 3
    $scope.getLabTestPDF = function () {
        var DocumentType = this.item.DOKAR; // doc type
        var DocumentNumber = this.item.DOKNR; // doc number מספר הזמנה
        var DocumentVersion = this.item.DOKVR; // doc virsion
        //var DocumentPart = this.item.FALNR; // doc part
        var DocumentPart = this.item.DOKTL; // doc part 
        var ServiceCode = this.item.NUMSERV; // service code

        showLoader();
        var fileUrl = "/WebApi/api/PrivateArea/GetLaboratoryTestResultsPDF?" + 'DocumentType=' + DocumentType + '&DocumentNumber=' + DocumentNumber + '&DocumentVersion=' + DocumentVersion + '&DocumentPart=' + DocumentPart + '&ServiceCode=' + ServiceCode;


        $http.get(fileUrl, { responseType: 'arraybuffer' })
        .success(function (response) {
            // It is necessary to create a new blob object with mime-type explicitly set
            // otherwise only Chrome works like it should
            var newBlob = new Blob([response], { type: "application/pdf" })

            // IE doesn't allow using a blob object directly as link href
            // instead it is necessary to use msSaveOrOpenBlob
            if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                window.navigator.msSaveOrOpenBlob(newBlob);
                return;
            }

            // For other browsers: 
            // Create a link pointing to the ObjectURL containing the blob.
            const data = window.URL.createObjectURL(newBlob);
            var link = document.createElement('a');
            link.href = data;
            link.download = "Lab.pdf";
            //margalit: comment out, because this doesn't work in firefox
            //link.click();
            link.dispatchEvent(new MouseEvent('click', { bubbles: true, view: window }));

        });

        hideLoader();
    }

    $scope.sliceString = function (str, startIndex, endIndex) {

        return str.slice(startIndex, endIndex);
    }

    $scope.redirectToLabDetailsPage = function (innerPageUrl) {

        var fileUrl = innerPageUrl + "?docType=" + this.item.DOKAR + "&docNumber=" + this.item.DOKNR +
            "&docVersion=" + this.item.DOKVR + "&docPart=" + this.item.DOKTL
            + '&labName=' + this.item.DKTXT + '&orderNum=' + this.item.RES2;

        window.location.href = fileUrl;

    }

}]);


//inner lab test results start -------------------------------------------------------------------
//graph in inner results



var LaboratoryTestResultDetailsApp = angular.module('LaboratoryTestResultDetailsApp', ['ui.bootstrap']);
LaboratoryTestResultDetailsApp.controller('LaboratoryTestResultDetails', ['$scope', '$compile', '$http', '$uibModal', function ($scope, $compile, $http, $uibModal) {
    showLoader();

    innerLabParams = {
        docType: getParameterByName("docType"),
        docNumber: getParameterByName("docNumber"),
        docVersion: getParameterByName("docVersion"),
        docPart: getParameterByName("docPart"),
        siteCollUrl: _spPageContextInfo.siteAbsoluteUrl
    }



    $http.get("/WebApi/api/PrivateArea/GetInnerLabTestResults", { params: innerLabParams })
.then(function successCallback(response) {
    if (response == "-1") {
        console.log("GetInnerLabTestResults Error getting data!")
    }
    else {
        showLoader();

        var JsonRes = jQuery.parseJSON(response.data);
        dic = JsonRes.PageUrls;
        JsonRes = handleArray(JsonRes.LabData.NamerAnswer.ETLABDATA);
        $scope.InnerResultsCount = JsonRes.length;
        $scope.Items_Inner = ChangeDateAndTimeFormat(JsonRes, "", "DODAT");/* *currently: changes *time to HH:MM and *date to dd-mm-yyyy
                       .slice(13,25)                                                         *property names (DOTIM) *has* to be identical to the prop names returnd from api*
                                                                             */
    }
    hideLoader();
    try { ClinicTestsAppDoneRender(); } catch (err) { }
}, function errorCallback(response) {
    hideLoader();
    console.log("Internal server error: 500. Session End or Token Invalid");
    if ($("#suiteBar").length != 1) // check if you are not in Admin Mode with Rebon shown in the page
    {
        window.location.href = loginRedirectAfterLogout;
    }
});
    $scope.retrieveLabNameFromQueryString = function () {
        return getParameterByName("labName");
    }
    $scope.retrieveOrderNumFromQueryString = function () {
        return getParameterByName("orderNum");
    }
    $scope.retrieveLabInfoUrl = function () {
        if (dic != null && dic[this.item.N2LEISTID] != undefined) {
            return dic[this.item.N2LEISTID];
        }
        else {
            return "";
        }
    }

    //axis should not be shown in there is no normalow or high
    $scope.returnVisiblityOfAxis = function () {
        if (this.item.NORMAHIGH == "" || this.item.NORMALOW == '' || this.item.HideAxis == true) {
            return "{'visibility':'hidden'}";
        }

    }

    $scope.getPositionOfXAxis = function () {
        if (this.item.HideAsterikInAxis == true) {
            return "{'visibility':'hidden'}";
        }
        else {
            return "{'left':'" + this.item.XPOS + "'}";
        }

    }

    $scope.openGraph = function () {
        var serviceCode = this.item.N2LEISTID;
        var htmlModal = "<script src='/Style%20Library/Tasmc/Js/labresultsgraph.js'></script><div class='lab-inner-graph-modal'><div class='modal-header'><h3>" +/*this.item.N2KATTEXT*/ +"</h3></div>\
                            <div class='modal-body'>\
                             <h4>Just something random here</h4>\
                                <div id='chartdiv' style='width: 100%; height: 400px; background-color: #FFFFFF;' ></div>\
                            </div>\
                            <div class='modal-footer'>\
                                <button class='btn btn-primary' ng-click='ok()'>OK</button>\
                                <button class='btn btn-warning' ng-click='cancel()'>Cancel</button>\
                            </div></div>"
        var modalInstance = $uibModal.open({
            template: htmlModal,
            controller: 'GraphModalCtrl',
            size: 'md',
            resolve: {
                serviceCode: function () {
                    return serviceCode;
                }
            }
        });
    }

    handleArray = function (arr) {
        $(arr).each(function (i, o) {
            var val = Number($(o)[0].N2VALUE);
            if (isNaN(val)) {
                $(o)[0].HideAsterikInAxis = true;
            }
            if ($(o)[0].NORMAHIGH != "" && $(o)[0].NORMALOW != "") {
                var high = Number($(o)[0].NORMAHIGH);
                var low = Number($(o)[0].NORMALOW);
                if (isNaN(high)) {
                    $(o)[0].HideAxis = true;
                }
                if (isNaN(low)) {
                    $(o)[0].HideAxis = true;
                }
                var diff = high - low;
                var unit = diff / 5;
                var numOfUnits = (val - low) / unit;
                var distance = numOfUnits * 19.6;
                var percentageToMoveLeftOnAxis;
                if (val > low && val < high) {
                    percentageToMoveLeftOnAxis = (-100 + distance) + '%';
                }
                else if (val < low) {
                    percentageToMoveLeftOnAxis = '-100%';
                }
                else if (val > high) {
                    percentageToMoveLeftOnAxis = '-1%';
                }
                else if (val == low) {
                    percentageToMoveLeftOnAxis = '-95%';
                }
                else if (val == high) {
                    percentageToMoveLeftOnAxis = '-5%';
                }
            }

            $(o)[0].XPOS = percentageToMoveLeftOnAxis;

            console.log(location);
        })

        return arr;
    }





}]);

/*

angular.module('MyApp', [])

.controller('MyCtrl', [function() {
    angular.element(document).ready(function () {
        document.getElementById('msg').innerHTML = 'Hello';
    });
}]);
*/

LaboratoryTestResultDetailsApp.controller('GraphModalCtrl', function ($scope, $uibModalInstance, $http, serviceCode) {
    /*angular.element(document).ready(function () {*/
    innerLabParams = {
        serviceCode: serviceCode,
    }
    $http.get("/WebApi/api/PrivateArea/GetGraphInfoForInnerLabTest", { params: innerLabParams })
    .then(function successCallback(response) {
        if (response == "-1") {
            console.log("GetGraphInfoForInnerLabTest Error getting data!")
        }
        else {
            // showLoader();

            var JsonRes = jQuery.parseJSON(response.data);

            //JsonRes = handleArray(JsonRes.LabData.NamerAnswer.ETLABDATA);
            //$scope.InnerResultsCount = JsonRes.length;
            //$scope.Items_Inner = ChangeDateAndTimeFormat(JsonRes, "", "DODAT");/* *currently: changes *time to HH:MM and *date to dd-mm-yyyy
            //               .slice(13,25)                                                         *property names (DOTIM) *has* to be identical to the prop names returnd from api*
            //                                                                     */
        }

        // hideLoader();




        try { ClinicTestsAppDoneRender(); } catch (err) { }
    }, function errorCallback(response) {
        hideLoader();
        console.log("Internal server error: 500. Session End or Token Invalid");
        if ($("#suiteBar").length != 1) // check if you are not in Admin Mode with Rebon shown in the page
        {
            window.location.href = loginRedirectAfterLogout;
        }
    });
});
//$scope.ok = function () {
//    $uibModalInstance.close("Ok");
//}

//$scope.cancel = function () {
//    $uibModalInstance.dismiss();
//}



//inner lab test results end -------------------------------------------------------------------

angular.element(document).ready(function () {
    console.log('page loading completed');
});

var ClinicTestsApp = angular.module('ClinicTestsApp', []);
ClinicTestsApp.controller('ClinicTestsController', ['$scope', '$compile', '$http', function ($scope, $compile, $http) {
    $http.get("/WebApi/api/PrivateArea/GetPatientClinicTests")
            .then(function successCallback(response) {
                if (response == "-1") {
                    console.log("GetPatientClinicTests Error getting data!")
                }
                else {
                    showLoader();
                    //  console.log(jQuery.parseJSON(response.data));

                    var JsonRes = jQuery.parseJSON(response.data);
                    try {
                        var knownDTIDsArray = UIResource.PatientClinicTests_DTIDs.toLowerCase().split(',');
                        var tabCategoriesArray = UIResource.PatientClinicTests_Tabs.split(','); //debugger;
                        var protfs = new Array();
                        $(JsonRes).each(function (i, o) {
                            var cat = $(o)[0].PROTF;
                            if (jQuery.inArray(cat, tabCategoriesArray) >= 0) {
                                if (jQuery.inArray(cat, protfs) == -1) {
                                    try {
                                        protfs.push(cat);
                                    }
                                    catch (err) { }
                                }
                            }
                            else {
                                var DTID = $(o)[0].DTID.toLowerCase();
                                if (jQuery.inArray(DTID, knownDTIDsArray) == -1) {
                                    if (jQuery.inArray('אחר', protfs) == -1) {
                                        protfs.push('אחר');
                                    }
                                    $(o)[0].PROTF = 'אחר';
                                }
                            }

                        });
                    }
                    catch (err) {

                        console.log(err);
                        hideLoader();
                    }


                    $scope.resultsCount = protfs.length;
                    $scope.Tabs = protfs;
                    $scope.Items = ChangeDateAndTimeFormat(JsonRes, "DOTIM", "DODAT");/* *currently: changes *time to HH:MM and *date to dd-mm-yyyy
                                                                                *property names (DOTIM) *has* to be identical to the prop names returnd from api* 
                                                                             */
                }
                hideLoader();
                try { ClinicTestsAppDoneRender(); } catch (err) { }
            }, function errorCallback(response) {
                hideLoader();
                console.log("Enternal server error : 500. Session End or Token Invalid");
                if ($("#suiteBar").length != 1) // check if you are not in Admin Mode with Rebon shown in the page
                {
                    window.location.href = loginRedirectAfterLogout;
                }
            });

    $scope.init1 = function (Title1, IsActive) {
        $scope.GastroTitle = Title1;
        if (IsActive != true) {
            $(".content-tabs .card-tabs li:nth-child(1)").hide();
        }
        else {
            $(".content-tabs .card-tabs li:nth-child(1)").show();
        }
        console.log(IsActive);
    }
    $scope.init2 = function (Title2, IsActive) {
        $scope.DemotTitle = Title2;
        if (IsActive != true) {
            $(".content-tabs .card-tabs li:nth-child(2)").hide();
        }
        else {
            $(".content-tabs .card-tabs li:nth-child(2)").show();
        }
        console.log(IsActive);
    }
    $scope.init3 = function (Title3, IsActive) {
        $scope.AkgTitle = Title3;
        if (IsActive != true) {
            $(".content-tabs .card-tabs li:nth-child(3)").hide();
        }
        else {
            $(".content-tabs .card-tabs li:nth-child(3)").show();
        }
        console.log(IsActive);
    }

    ///GetPatientClinicTestsPDF 4
    $scope.getDocPDF = function () {
        var DOKAR = this.item.DOKAR;
        var DOKNR = this.item.DOKNR// "10071502108"; 
        var DOKVR = this.item.DOKVR;
        var DOKTL = this.item.DOKTL;

        showLoader();

        var fileUrl =
           "/WebApi/api/PrivateArea/GetPatientClinicTestsPDF?docType=" + DOKAR + "&docNumber=" + DOKNR + "&docVersion=" + DOKVR + "&DocPart=" + DOKTL;

        $http.get(fileUrl, { responseType: 'arraybuffer' })
              .success(function (response) {
                  // It is necessary to create a new blob object with mime-type explicitly set
                  // otherwise only Chrome works like it should
                  var newBlob = new Blob([response], { type: "application/pdf" })

                  // IE doesn't allow using a blob object directly as link href
                  // instead it is necessary to use msSaveOrOpenBlob
                  if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                      window.navigator.msSaveOrOpenBlob(newBlob);
                      return;
                  }

                  // For other browsers: 
                  // Create a link pointing to the ObjectURL containing the blob.
                  const data = window.URL.createObjectURL(newBlob);
                  var link = document.createElement('a');
                  link.href = data;
                  link.download = "Clinic.pdf";
                  //margalit: comment out, because this doesn't work in firefox
                  //link.click();
                  link.dispatchEvent(new MouseEvent('click', { bubbles: true, view: window }));
              });
        hideLoader();
    }

    $scope.checkinHide = function () {
        if (this.item.CHEKIN != "") {
            return true;
        }
        else {
            return false;
        }
    }
}]);

function sortByKeyDesc(array, key) {
    return array.sort(function (a, b) {
        var x = a[key]; var y = b[key];
        return ((x > y) ? -1 : ((x < y) ? 1 : 0));
    });
}
//todo
var ClinicTestsApp = angular.module('HospitalizationAndVisitSummaryApp', []);
ClinicTestsApp.controller('HospitalizationAndVisitSummary', ['$scope', '$compile', '$http', function ($scope, $compile, $http) {

    showLoader();
    $http.get("/WebApi/api/PrivateArea/GetHospitalizationAndVisitSummary")
            .then(function successCallback(response) {
                if (response == "-1") {
                    console.log("GetHospitalizationAndVisitSummary Error getting data!")
                }
                else {
                    //  showLoader();
                    //  console.log(jQuery.parseJSON(response.data));

                    var JsonRes = jQuery.parseJSON(response.data);
                    $(JsonRes).each(function (i, o) {
                        try {
                            var protf = $(o).attr("PROTF");
                            protf = protf.replace("סיכום", "").trim();
                            $(o).attr("PROTF", protf);
                        } catch (e) {

                        }
                    });

                    JsonRes = sortByKeyDesc(JsonRes, "DODAT");
                    try {
                        var knownDTIDsArray = UIResource.PatientClinicTests_DTIDs.toLowerCase().split(',');
                        var tabCategoriesArray = UIResource.PatientHospitalizationAndVisits_Tabs.split(',');//debugger;
                        var protfs = new Array();
                        $(JsonRes).each(function (i, o) {
                            var cat = $(o)[0].PROTF;
                            if (jQuery.inArray(cat, tabCategoriesArray) >= 0) {
                                if (jQuery.inArray(cat, protfs) == -1) {
                                    try {
                                        protfs.push(cat);
                                    }
                                    catch (err) { }
                                }
                            }
                            else {
                                var DTID = $(o)[0].DTID.toLowerCase();
                                if (jQuery.inArray(DTID, knownDTIDsArray) == -1) {
                                    if (jQuery.inArray('אחר', protfs) == -1) {
                                        protfs.push('אחר');
                                    }
                                    $(o)[0].PROTF = 'אחר';
                                }
                            }

                        });
                    }
                    catch (err) {

                        console.log(err);
                        hideLoader();
                    }


                    $scope.resultsCount = protfs.length;
                    $scope.Tabs = protfs;


                    $scope.Items = ChangeDateAndTimeFormat(JsonRes, "DOTIM", "DODAT");/* *currently: changes *time to HH:MM and *date to dd-mm-yyyy
                                                                                *property names (DOTIM) *has* to be identical to the prop names returnd from api* 
                                                                             */

                }
                hideLoader();
                try { ClinicTestsAppDoneRender(); } catch (err) { }

            }, function errorCallback(response) {
                hideLoader();
                console.log("Enternal server error : 500. Session End or Token Invalid");
                if ($("#suiteBar").length != 1) // check if you are not in Admin Mode with Rebon shown in the page
                {
                    window.location.href = loginRedirectAfterLogout;
                }

            });


    $scope.init1 = function (Title1, IsActive) {
        $scope.Eshpoz = Title1;
        if (IsActive != true) {
            $(".content-tabs .card-tabs li:nth-child(1)").hide();
        }
        else {
            $(".content-tabs .card-tabs li:nth-child(1)").show();
        }
        console.log(IsActive);
    }
    $scope.init2 = function (Title2, IsActive) {
        $scope.bekor = Title2;
        if (IsActive != true) {
            $(".content-tabs .card-tabs li:nth-child(2)").hide();
        }
        else {
            $(".content-tabs .card-tabs li:nth-child(2)").show();
        }
        console.log(IsActive);
    }


    ///GetPatientClinicTestsPDF 1
    $scope.getDocPDF = function () {
        var DOKAR = this.item.DOKAR;
        var DOKNR = this.item.DOKNR// "10071502108"; 
        var DOKVR = this.item.DOKVR;
        var DOKTL = this.item.DOKTL;

        showLoader();
        var fileUrl =
            "/WebApi/api/PrivateArea/GetPatientClinicTestsPDF?docType=" + DOKAR + "&docNumber=" + DOKNR + "&docVersion=" + DOKVR + "&DocPart=" + DOKTL;

        $http.get(fileUrl, { responseType: 'arraybuffer' })
              .success(function (response) {
                  // It is necessary to create a new blob object with mime-type explicitly set
                  // otherwise only Chrome works like it should
                  var newBlob = new Blob([response], { type: "application/pdf" })

                  // IE doesn't allow using a blob object directly as link href
                  // instead it is necessary to use msSaveOrOpenBlob
                  if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                      window.navigator.msSaveOrOpenBlob(newBlob);
                      return;
                  }

                  // For other browsers: 
                  // Create a link pointing to the ObjectURL containing the blob.
                  const data = window.URL.createObjectURL(newBlob);
                  var link = document.createElement('a');
                  link.href = data;
                  link.download = "Clinic.pdf";
                  //margalit: comment out, because this doesn't work in firefox
                  //link.click();
                  link.dispatchEvent(new MouseEvent('click', { bubbles: true, view: window }));
              });
        hideLoader();
    }

}]);
function validateFiles() {
    if (!userFilesSent) {
        $('#ifileupload')[0].contentWindow.displayMissingFilesValidationUserMessage();
    }
    return userFilesSent;
}





var userFilesSent = false;
function filesSent() {
    userFilesSent = true;
    $("#submit").click();
}


var addSlash = true;
$("document").ready(function () {

    var zid = GetUrlKeyValue("zid");
    if (zid) {
        $("#ifileupload").attr("src", "/Be-Well/Pages/upload.aspx?zid=" + zid);
    }

    $("#otpDatePicker #DOB").on('keyup',
            function (e) {
                var val = $(this).val();
                if (val == 0) addSlash = true;
                if (e.which == 111) addSlash = false;
                if (addSlash) {
                    if (e.which != 8 && e.which != 46 && (val.length == 2 || val.length == 5)) {
                        val += "/";
                        $(this).val(val);
                    }
                }
            }
        );

});


var currentPage = '';
function createPaging(pagerId, pagerSelector, itemsId) {
    setTimeout(function () {
        pageSize = 10;
        //var numOfItems = $(".future-appointments-wrapper ." + itemsId).length;
        var numOfItems = $("li[category='" + itemsId + "']").length;
        var text = "נמצאו " + numOfItems + " תוצאות";
        $(".numberofresults").text(text);
        var pagingButtonsNumber = numOfItems / pageSize;
        $("." + pagerSelector).attr("itemsid", itemsId).empty();
        if (pagingButtonsNumber < 1 || pagingButtonsNumber == 1) return true;
        $("." + pagerSelector).append("<li class='leftpaging'><a href='#'><</a></li>");
        for (var i = 1; i < pagingButtonsNumber + 1; i++) {
            if (i == 1) {
                $("." + pagerSelector).append("<li class='pageitem current'><a href='#' class='current' page='" + i + "'>" + i + "</a></li>");
            }
            else if (i > 1 && i <= 3) {
                $("." + pagerSelector).append("<li class='pageitem nextPage'><a href='#'  page='" + i + "'>" + i + "</a></li>");
            }
            else {
                $("." + pagerSelector).append("<li class='pageitem'><a href='#'  page='" + i + "'>" + i + "</a></li>");
            }
        }
        $("." + pagerSelector).append("<li class='rightpaging'><a href='#' class='curentpagerarrow'>></a></li>");



        showPage = function (page, itemsId) {



            $("li[category='" + itemsId + "']").hide();
            $("li[category='" + itemsId + "']").each(function (n) {
                if (n >= pageSize * (page - 1) && n < pageSize * page)
                    $(this).show();
            });
        }

        showPage(1, itemsId);

        $("." + pagerSelector + " li a").click(function () {


            if ($(this).parent().hasClass("leftpaging") || $(this).parent().hasClass("rightpaging")) {
                currentPage = $("." + pagerSelector + " li a.current").text();
                if ($(this).parent().hasClass("leftpaging")) {
                    currentPage--;
                    if (currentPage <= 0) return;
                }
                if ($(this).parent().hasClass("rightpaging")) {
                    currentPage++;
                }
                setTimeout(function () { $('.ulpager1').find("a[page='" + currentPage + "']").click() }, 1);
                return;
            }

            var itemsId = $(this).closest("ul").attr("itemsid");
            $("." + pagerSelector + " li").removeClass("current");
            $("." + pagerSelector + " li a").removeClass("current");
            $("." + pagerSelector + " li").removeClass("nextPage");
            $("." + pagerSelector + " li").removeClass("prevPage");
            $(this).addClass("current");
            $(this).parent().addClass("current");

            var liNext = $(this).closest("li");
            var liPrev = $(this).closest("li");
            for (i = 0; i <= 1; i++) {
                try {
                    liNext = $(liNext).next();
                    $(liNext).addClass("nextPage");
                }
                catch (err) { }

                try {
                    liPrev = $(liPrev).prev();
                    $(liPrev).addClass("prevPage");
                }
                catch (err) { }

            }
            var pnum = parseInt($(this).text());
            $(".leftpaging a").addClass("curentpagerarrow");
            $(".rightpaging a").addClass("curentpagerarrow");
            if (pnum <= 1) {
                $(".leftpaging a").removeClass("curentpagerarrow");
            }

            showPage(pnum, itemsId);
            $(".s4-breadcrumbRootNode")[0].scrollIntoView();
        });


    }, 100);
}

var htmlParseDone = false;
setTimeout(function () {

    var t = $(".contentText").text();
    $(".contentText").html(t);


    if (window.matchMedia("(max-width: 768px)").matches) {

        window.openNavMobile = function () {
            $("#imgPrefetch").after("<div class='dialogbg'/>");
            /*if (!htmlParseDone){
                var t = $(".contentText").text();
                $(".contentText").html(t);
                htmlParseDone = true;
            
            }*/
            $("#mySidenavHelp").dialog({
                width: $(window).width() - 40,
                height: $(window).height() - 120,
                position: { my: "top center" }
            });

            $("#mySidenavHelp").dialog({
                close: function (event, ui) {
                    $(".dialogbg").remove();
                }
            });
        }


        window.closeNav = function () {
            $("#mySidenavHelp").dialog("destroy");
            $(".dialogbg").remove();
        }
    }





}, 1000);


